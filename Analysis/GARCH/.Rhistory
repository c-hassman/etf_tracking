TDm_uga <- lm(UGA$per_NAV_return ~ UGA$per_asset_return)
TDa_corn <- lm(CORN$per_ETF_return ~ CORN$per_NAV_return)
TDa_soyb <- lm(SOYB$per_ETF_return ~ SOYB$per_NAV_return)
TDa_weat <- lm(WEAT$per_ETF_return ~ WEAT$per_NAV_return)
TDa_uso <- lm(USO$per_ETF_return ~ USO$per_NAV_return)
TDa_uga <- lm(UGA$per_ETF_return ~ UGA$per_NAV_return)
TD_corn$residuals
summary(TD_corn)
s<- summary(TD_corn)
se_calc <- function(model){
k = length(model$coefficients)-1
SSE = sum(model$residuals**2)
n = length(model$residuals)
return(sqrt(SSE/(n-(1+k))))
}
se_calc(TD_corn)
S
ETFs <- c("CORN", "SOYB", "WEAT", "USO", "UGA")
TD_se <- c(se_calc(TD_corn),
se_calc(TD_soyb),
se_calc(TD_weat),
se_calc(TD_uso),
se_calc(TD_uga))
TDa_se <- c(se_calc(TDa_corn),
se_calc(TDa_soyb),
se_calc(TDa_weat),
se_calc(TDa_uso),
se_calc(TDa_uga))
TDm_se <- c(se_calc(TDm_corn),
se_calc(TDm_soyb),
se_calc(TDm_weat),
se_calc(TDm_uso),
se_calc(TDm_uga))
TD_se_df <- cbind(ETFs, TD_se, TDa_se, TDm_se)
write_csv(TD_se_df, "~/Documents/etf_tracking/Analysis/Summary_Statistics/TD_SE.csv)
##### Result Tables ############################################################
#### TD
# Make dataframe of coefficients
TD <- data.frame(summary(TD_corn)$coefficients)
TD <- rbind(TD, data.frame(summary(TD_soyb)$coefficients),
data.frame(summary(TD_weat)$coefficients),
data.frame(summary(TD_uso)$coefficients),
data.frame(summary(TD_uga)$coefficients))
# Add a column of R Squared Values
TD <- cbind(TD,  c(summary(TD_corn)$r.squared, NA,
summary(TD_soyb)$r.squared, NA,
summary(TD_weat)$r.squared, NA,
summary(TD_uso)$r.squared, NA,
summary(TD_uga)$r.squared, NA))
# Write to CSV
write.csv(TD, "~/Documents/etf_tracking/Analysis/MZ/TD_results.csv")
#### TDm
TDm <- data.frame(summary(TDm_corn)$coefficients)
TDm <- rbind(TDm, data.frame(summary(TDm_soyb)$coefficients),
data.frame(summary(TDm_weat)$coefficients),
data.frame(summary(TDm_uso)$coefficients),
data.frame(summary(TDm_uga)$coefficients))
TDm <- cbind(TDm,  c(summary(TDm_corn)$r.squared, NA,
summary(TDm_soyb)$r.squared, NA,
summary(TDm_weat)$r.squared, NA,
summary(TDm_uso)$r.squared, NA,
summary(TDm_uga)$r.squared, NA))
write.csv(TDm, "~/Documents/etf_tracking/Analysis/MZ/TDm_results.csv")
#### TDa
TDa <- data.frame(summary(TDa_corn)$coefficients)
TDa <- rbind(TDa, data.frame(summary(TDa_soyb)$coefficients),
data.frame(summary(TDa_weat)$coefficients),
data.frame(summary(TDa_uso)$coefficients),
data.frame(summary(TDa_uga)$coefficients))
TDa <- cbind(TDa,  c(summary(TDa_corn)$r.squared, NA,
summary(TDa_soyb)$r.squared, NA,
summary(TDa_weat)$r.squared, NA,
summary(TDa_uso)$r.squared, NA,
summary(TDa_uga)$r.squared, NA))
write.csv(TDa, "~/Documents/etf_tracking/Analysis/MZ/TDa_results.csv")
##### Visualize Results ########################################################
# Create list of names of Each ETF
TD_name = list('CORN', 'SOYB', 'WEAT', 'USO', 'UGA')
# Create a list to hold all the models
TD_list = list(TD_corn, TD_soyb, TD_weat, TD_uso, TD_uga)
TDm_list = list(TDm_corn, TDm_soyb, TDm_weat, TDm_uso, TDm_uga)
TDa_list = list(TDa_corn, TDa_soyb, TDa_weat, TDa_uso, TDa_uga)
# Create empty list to store coefs and se
TD_alpha = list()
TD_alpha_se = list()
TD_beta = list()
TD_beta_se = list()
TDm_alpha = list()
TDm_alpha_se = list()
TDm_beta = list()
TDm_beta_se = list()
TDa_alpha = list()
TDa_alpha_se = list()
TDa_beta = list()
TDa_beta_se = list()
# TD for loop
for (i in TD_list){
m = summary(i, robust = TRUE)
TD_alpha <- c(TD_alpha, as.numeric(m$coefficients[1]))
TD_beta <- c(TD_beta, as.numeric(m$coefficients[2]))
TD_alpha_se <- c(TD_alpha_se, as.numeric(m$coefficients[3]))
TD_beta_se <- c(TD_beta_se, as.numeric(m$coefficients[4]))
}
# TDm for loop
for (i in TDm_list){
m = summary(i, robust = TRUE)
TDm_alpha <- c(TDm_alpha, as.numeric(m$coefficients[1]))
TDm_beta <- c(TDm_beta, as.numeric(m$coefficients[2]))
TDm_alpha_se <- c(TDm_alpha_se, as.numeric(m$coefficients[3]))
TDm_beta_se <- c(TDm_beta_se, as.numeric(m$coefficients[4]))
}
# TDa for loop
for (i in TDa_list){
m = summary(i, robust = TRUE)
TDa_alpha <- c(TDa_alpha, as.numeric(m$coefficients[1]))
TDa_beta <- c(TDa_beta, as.numeric(m$coefficients[2]))
TDa_alpha_se <- c(TDa_alpha_se, as.numeric(m$coefficients[3]))
TDa_beta_se <- c(TDa_beta_se, as.numeric(m$coefficients[4]))
}
# Lists of lists to store results
TD <- list('ETF' = TD_name, 'Alpha' = TD_alpha, 'Alpha_SE' = TD_alpha_se,
'Beta' = TD_beta, 'Beta_SE' = TD_beta_se)
TDm <- list(TD_name, TDm_alpha, TDm_alpha_se, TDm_beta, TDm_beta_se)
TDa <- list(TD_name, TDa_alpha, TDa_alpha_se, TDa_beta, TDa_beta_se)
# This horrible implmentation is because I am used to using python
TD_df <- as.data.frame(matrix(unlist(TD), nrow=length(unlist(TD[1]))))
TDm_df <- as.data.frame(matrix(unlist(TDm), nrow=length(unlist(TDm[1]))))
TDa_df <- as.data.frame(matrix(unlist(TDa), nrow=length(unlist(TDa[1]))))
colnames(TD_df) <- c('ETF', 'Alpha', 'Alpha_SE', 'Beta', 'Beta_SE')
colnames(TDm_df) <- c('ETF', 'Alpha', 'Alpha_SE', 'Beta', 'Beta_SE')
colnames(TDa_df) <- c('ETF', 'Alpha', 'Alpha_SE', 'Beta', 'Beta_SE')
# clean up messy enviroment
rm(list = setdiff(ls(), c('TD_df', 'TDm_df', 'TDa_df')))
# Create upper and lower bounds
#df_list = list(TD_df, TDm_df, TDa_df)
multi = 1.96
TD_df <- cbind(TD_df$ETF, as.data.frame(lapply(TD_df[2:5], as.numeric)))
TDm_df <- cbind(TDm_df$ETF, as.data.frame(lapply(TDm_df[2:5], as.numeric)))
TDa_df <- cbind(TDa_df$ETF, as.data.frame(lapply(TDa_df[2:5], as.numeric)))
typeof(TD_df$Alpha)
# Tried to do this a better way... but not great
TD_df$Alpha_min <- TD_df$Alpha - (multi * TD_df$Alpha_SE)
TD_df$Alpha_max <- TD_df$Alpha + (multi * TD_df$Alpha_SE)
TD_df$Beta_min <- TD_df$Beta - (multi * TD_df$Beta_SE)
TD_df$Beta_max <- TD_df$Beta + (multi * TD_df$Beta_SE)
TDm_df$Alpha_min <- TDm_df$Alpha - (multi * TDm_df$Alpha_SE)
TDm_df$Alpha_max <- TDm_df$Alpha + (multi * TDm_df$Alpha_SE)
TDm_df$Beta_min <- TDm_df$Beta - (multi * TDm_df$Beta_SE)
TDm_df$Beta_max <- TDm_df$Beta + (multi * TDm_df$Beta_SE)
TDa_df$Alpha_min <- TDa_df$Alpha - (multi * TDa_df$Alpha_SE)
TDa_df$Alpha_max <- TDa_df$Alpha + (multi * TDa_df$Alpha_SE)
TDa_df$Beta_min <- TDa_df$Beta - (multi * TDa_df$Beta_SE)
TDa_df$Beta_max <- TDa_df$Beta + (multi * TDa_df$Beta_SE)
# Rename the first column
colnames(TD_df)[1] <- 'ETF'
colnames(TDm_df)[1] <- 'ETF'
colnames(TDa_df)[1] <- 'ETF'
# Set ETF Colum as an ordered factor
TD_df$ETF <- factor(TD_df$ETF, levels = TD_df$ETF)
TDm_df$ETF <- factor(TDm_df$ETF, levels = TDm_df$ETF)
TDa_df$ETF <- factor(TDa_df$ETF, levels = TDa_df$ETF)
# TD Alpha
g1 <- ggplot()+
geom_errorbar(data = TD_df, mapping = aes(x = ETF, ymin = Alpha_min,
ymax = Alpha_max), width = 0.25) +
geom_point(data = TD_df, aes(x = ETF, y = Alpha)) +
ggtitle('Alpha Coefficient Estimates') +
ylab('Total TD') + theme_bw() + xlab('') +
theme(plot.margin=unit(c(0.1,0.05,-0.4,0.05), "cm")) +
ylim(-0.041, 0.03) + geom_hline(yintercept = 0, linetype = 'dashed')
#TDm Alpha
g2 <- ggplot()+
geom_errorbar(data = TDm_df, mapping = aes(x = ETF, ymin = Alpha_min,
ymax = Alpha_max), width = 0.25) +
geom_point(data = TDm_df, aes(x = ETF, y = Alpha)) +
#ggtitle('Managerial TD Alpha Coefficient Estimates') +
ylab('Managerial TD') + theme_bw() + xlab('') +
theme(plot.margin=unit(c(-0.05,0.05,-0.1,0.05), "cm")) +
ylim(-0.041, 0.03) + geom_hline(yintercept = 0, linetype = 'dashed')
#TDa Alpha
g3 <- ggplot()+
geom_errorbar(data = TDa_df, mapping = aes(x = ETF, ymin = Alpha_min,
ymax = Alpha_max), width = 0.25) +
geom_point(data = TDa_df, aes(x = ETF, y = Alpha)) +
#ggtitle('Arbitrage TD Alpha Coefficient Estimates') +
ylab('Arbitrage TD') + theme_bw() + xlab('') +
theme(plot.margin=unit(c(-0.05,0.05,-0.1,0.05), "cm")) +
ylim(-0.041, 0.03) + geom_hline(yintercept = 0, linetype = 'dashed')
#TD Beta
g4 <- ggplot()+
geom_errorbar(data = TD_df, mapping = aes(x = ETF, ymin = Beta_min,
ymax = Beta_max), width = 0.25) +
geom_point(data = TD_df, aes(x = ETF, y = Beta)) +
ggtitle('Beta Coefficient Estimates') +
ylab('') + theme_bw() + xlab('') +
theme(plot.margin=unit(c(0.1,0.05,-0.4,0.05), "cm")) +
ylim(0.88, 1.02) + geom_hline(yintercept = 1, linetype = 'dashed')
#TDm Beta
g5 <- ggplot()+
geom_errorbar(data = TDm_df, mapping = aes(x = ETF, ymin = Beta_min,
ymax = Beta_max), width = 0.25) +
geom_point(data = TDm_df, aes(x = ETF, y = Beta)) +
#ggtitle('Managerial TD Beta Coefficient Estimates') +
ylab('') + theme_bw() + xlab('') +
theme(plot.margin=unit(c(-0.05,0.05,-0.1,0.05), "cm")) +
ylim(0.88, 1.02) + geom_hline(yintercept = 1, linetype = 'dashed')
# TDa Beta
g6 <- ggplot()+
geom_errorbar(data = TDa_df, mapping = aes(x = ETF, ymin = Beta_min,
ymax = Beta_max), width = 0.25) +
geom_point(data = TDa_df, aes(x = ETF, y = Beta)) +
#ggtitle('Arbitrage TD Beta Coefficient Estimates') +
ylab('') + theme_bw() + xlab('') +
theme(plot.margin=unit(c(-0.05,0.05,-0.1,0.05), "cm")) +
ylim(0.88, 1.02) + geom_hline(yintercept = 1, linetype = 'dashed')
grid.arrange(g1,g4,g2,g5,g3,g6, nrow = 3)
################################################################################
####  MZ Analysis ##############################################################
################################################################################
# Colburn Hassman
# colburn7@vt.edu
# January 26, 2021
# IMPORT PACKAGES
library(gridExtra)
# IMPORT DATA
source("~/Documents/etf_tracking/Analysis/preprocessing.R")
CORN <- data_pull_ex("CORN")
SOYB <- data_pull_ex("SOYB")
WEAT <- data_pull_ex("WEAT")
USO <- data_pull_ex("USO")
UGA <- data_pull_ex("UGA")
#### Fit Models ################################################################
TD_corn <- lm(CORN$per_ETF_return ~ CORN$per_asset_return)
TD_soyb <- lm(SOYB$per_ETF_return ~ SOYB$per_asset_return)
TD_weat <- lm(WEAT$per_ETF_return ~ WEAT$per_asset_return)
TD_uso <- lm(USO$per_ETF_return ~ USO$per_asset_return)
TD_uga <- lm(UGA$per_ETF_return ~ UGA$per_asset_return)
TDm_corn <- lm(CORN$per_NAV_return ~ CORN$per_asset_return)
TDm_soyb <- lm(SOYB$per_NAV_return ~ SOYB$per_asset_return)
TDm_weat <- lm(WEAT$per_NAV_return ~ WEAT$per_asset_return)
TDm_uso <- lm(USO$per_NAV_return ~ USO$per_asset_return)
TDm_uga <- lm(UGA$per_NAV_return ~ UGA$per_asset_return)
TDa_corn <- lm(CORN$per_ETF_return ~ CORN$per_NAV_return)
TDa_soyb <- lm(SOYB$per_ETF_return ~ SOYB$per_NAV_return)
TDa_weat <- lm(WEAT$per_ETF_return ~ WEAT$per_NAV_return)
TDa_uso <- lm(USO$per_ETF_return ~ USO$per_NAV_return)
TDa_uga <- lm(UGA$per_ETF_return ~ UGA$per_NAV_return)
se_calc <- function(model){
k = length(model$coefficients)-1
SSE = sum(model$residuals**2)
n = length(model$residuals)
return(sqrt(SSE/(n-(1+k))))
}
ETFs <- c("CORN", "SOYB", "WEAT", "USO", "UGA")
TD_se <- c(se_calc(TD_corn),
se_calc(TD_soyb),
se_calc(TD_weat),
se_calc(TD_uso),
se_calc(TD_uga))
TDa_se <- c(se_calc(TDa_corn),
se_calc(TDa_soyb),
se_calc(TDa_weat),
se_calc(TDa_uso),
se_calc(TDa_uga))
TDm_se <- c(se_calc(TDm_corn),
se_calc(TDm_soyb),
se_calc(TDm_weat),
se_calc(TDm_uso),
se_calc(TDm_uga))
TD_se_df <- cbind(ETFs, TD_se, TDa_se, TDm_se)
write_csv(TD_se_df, "~/Documents/etf_tracking/Analysis/Summary_Statistics/TD_SE.csv")
TD_se_df <- as.data.frame(cbind(ETFs, TD_se, TDa_se, TDm_se))
write_csv(TD_se_df, "~/Documents/etf_tracking/Analysis/Summary_Statistics/TD_SE.csv")
View(TD_se_df)
################################################################################
######## GARCH Analysis  #######################################################
################################################################################
#
# Final Model specification for ETF Tracking Paper
#
# Colburn Hassman
# January 25, 2021
library(rugarch)
source("~/Documents/etf_tracking/Analysis/preprocessing.R")
CORN <- na.omit(data_pull_in("CORN"))
SOYB <- na.omit(data_pull_in("SOYB"))
WEAT <- na.omit(data_pull_in("WEAT"))
USO <- na.omit(data_pull_in("USO"))
UGA <- na.omit(data_pull_in("UGA"))
######### Base Model ###########################################################
# Define Base GARCH Model
base_spec <- ugarchspec(variance.model = list(garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0), include.mean = FALSE),
distribution.model = 'std')
#Calculate Base
CORN_base <- ugarchfit(data = CORN$TDa, spec = base_spec, solver = 'hybrid')
SOYB_base <- ugarchfit(data = SOYB$TDa, spec = base_spec, solver = 'hybrid')
WEAT_base <- ugarchfit(data = WEAT$TDa, spec = base_spec, solver = 'hybrid')
USO_base <- ugarchfit(data = USO$TDa, spec = base_spec, solver = 'hybrid')
UGA_base <- ugarchfit(data = UGA$TDa, spec = base_spec, solver = 'hybrid')
CORN_base
SOYB_base
WEAT_base
USO_base
UGA_base
####### Full Model #############################################################
###### External Regressors
plot(log(CORN$Volume), CORN$Volatility)
a <- lm(log(CORN$Volume) ~ CORN$Volatility)
summary(a)
plot(log(SOYB$Volume), SOYB$Volatility)
plot(log(USO$Volume), log(USO$Volatility))
plot(log(UGA$Volume), log(UGA$Volatility))
plot(log(CORN$Volatility), log(CORN$Volume))
# CORN
# Create a data frame of the relevant variables then convert to matrix
corn_ext <- as.matrix(data.frame(Volatility = CORN$Volatility,
Volume = log(CORN$Volume),
Roll = CORN$Roll))
soyb_ext <- as.matrix(data.frame(Volatility = SOYB$Volatility,
Volume = log(SOYB$Volume),
Roll = SOYB$Roll))
weat_ext <- as.matrix(data.frame(Volatility = WEAT$Volatility,
Volume = log(WEAT$Volume),
Roll = WEAT$Roll))
uso_ext <- as.matrix(data.frame(Volatility = USO$Volatility,
Volume = log(USO$Volume),
Roll = USO$Roll))
uga_ext <- as.matrix(data.frame(Volatility = UGA$Volatility,
Volume = log(UGA$Volume),
Roll = UGA$Roll))
corn_full_spec <- ugarchspec(variance.model = list(garchOrder = c(1,1),
external.regressors = corn_ext),
mean.model = list(armaOrder = c(0,0),
include.mean = FALSE),
distribution.model = 'std')
#Calculate Full
CORN_full <- ugarchfit(data = CORN$TDa, spec = corn_full_spec, solver = 'hybrid')
CORN_full
soyb_full_spec <- ugarchspec(variance.model = list(garchOrder = c(1,1),
external.regressors = soyb_ext),
mean.model = list(armaOrder = c(0,0),
include.mean = FALSE),
distribution.model = 'std')
weat_full_spec <- ugarchspec(variance.model = list(garchOrder = c(1,1),
external.regressors = weat_ext),
mean.model = list(armaOrder = c(0,0),
include.mean = FALSE),
distribution.model = 'std')
uso_full_spec <- ugarchspec(variance.model = list(garchOrder = c(1,1),
external.regressors = uso_ext),
mean.model = list(armaOrder = c(0,0),
include.mean = FALSE),
distribution.model = 'std')
uga_full_spec <- ugarchspec(variance.model = list(garchOrder = c(1,1),
external.regressors = uga_ext),
mean.model = list(armaOrder = c(0,0),
include.mean = FALSE),
distribution.model = 'std')
#Calculate Full
CORN_full <- ugarchfit(data = CORN$TDa, spec = corn_full_spec, solver = 'hybrid')
SOYB_full <- ugarchfit(data = SOYB$TDa, spec = soyb_full_spec, solver = 'hybrid')
WEAT_full <- ugarchfit(data = WEAT$TDa, spec = weat_full_spec, solver = 'hybrid')
USO_full <- ugarchfit(data = USO$TDa, spec = uso_full_spec, solver = 'hybrid')
UGA_full <- ugarchfit(data = UGA$TDa, spec = uga_full_spec, solver = 'hybrid')
SOYB_full
WEAT_full
weat_full_spec <- ugarchspec(variance.model = list(garchOrder = c(1,1),
external.regressors = weat_ext),
mean.model = list(armaOrder = c(0,0),
include.mean = TRUE),
distribution.model = 'std')
WEAT_full <- ugarchfit(data = WEAT$TDa, spec = weat_full_spec, solver = 'hybrid')
WEAT_full
USO_full
UGA_full
plot(WEAT$Date, WEAT$TDa)
plot(WEAT$Date, WEAT$TDa, type = "l")
plot(WEAT$Date, WEAT$Volatility, type = "l")
plot(WEAT$TDa, WEAT$Volatility)
WEAT_full <- ugarchfit(data = WEAT$TDa, spec = weat_full_spec, solver = 'hybrid')
USO_full <- ugarchfit(data = USO$TDa, spec = uso_full_spec, solver = 'hybrid')
plot(SOYB$Date, SOYB$TDa, type = "l")
View(CORN_full)
USO_full
UGA_full
uso_ext <- as.matrix(data.frame(Volatility = USO$Volatility,
#Volume = log(USO$Volume),
Roll = USO$Roll))
uga_ext <- as.matrix(data.frame(Volatility = UGA$Volatility,
#Volume = log(UGA$Volume),
Roll = UGA$Roll))
corn_full_spec <- ugarchspec(variance.model = list(garchOrder = c(1,1),
external.regressors = corn_ext),
mean.model = list(armaOrder = c(0,0),
include.mean = FALSE),
distribution.model = 'std')
soyb_full_spec <- ugarchspec(variance.model = list(garchOrder = c(1,1),
external.regressors = soyb_ext),
mean.model = list(armaOrder = c(0,0),
include.mean = FALSE),
distribution.model = 'std')
weat_full_spec <- ugarchspec(variance.model = list(garchOrder = c(1,1),
external.regressors = weat_ext),
mean.model = list(armaOrder = c(0,0),
include.mean = FALSE),
distribution.model = 'std')
uso_full_spec <- ugarchspec(variance.model = list(garchOrder = c(1,1),
external.regressors = uso_ext),
mean.model = list(armaOrder = c(0,0),
include.mean = FALSE),
distribution.model = 'std')
uga_full_spec <- ugarchspec(variance.model = list(garchOrder = c(1,1),
external.regressors = uga_ext),
mean.model = list(armaOrder = c(0,0),
include.mean = FALSE),
distribution.model = 'std')
CORN_full <- ugarchfit(data = CORN$TDa, spec = corn_full_spec, solver = 'hybrid')
USO_full <- ugarchfit(data = USO$TDa, spec = uso_full_spec, solver = 'hybrid')
UGA_full <- ugarchfit(data = UGA$TDa, spec = uga_full_spec, solver = 'hybrid')
USO_full
soyb_ext <- as.matrix(data.frame(Volatility = SOYB$Volatility,
#Volume = log(SOYB$Volume),
Roll = SOYB$Roll))
weat_ext <- as.matrix(data.frame(Volatility = WEAT$Volatility,
#Volume = log(WEAT$Volume),
Roll = WEAT$Roll))
uso_ext <- as.matrix(data.frame(Volatility = USO$Volatility,
#Volume = log(USO$Volume),
Roll = USO$Roll))
uga_ext <- as.matrix(data.frame(Volatility = UGA$Volatility,
#Volume = log(UGA$Volume),
Roll = UGA$Roll))
corn_full_spec <- ugarchspec(variance.model = list(garchOrder = c(1,1),
external.regressors = corn_ext),
mean.model = list(armaOrder = c(0,0),
include.mean = FALSE),
distribution.model = 'std')
soyb_full_spec <- ugarchspec(variance.model = list(garchOrder = c(1,1),
external.regressors = soyb_ext),
mean.model = list(armaOrder = c(0,0),
include.mean = FALSE),
distribution.model = 'std')
weat_full_spec <- ugarchspec(variance.model = list(garchOrder = c(1,1),
external.regressors = weat_ext),
mean.model = list(armaOrder = c(0,0),
include.mean = FALSE),
distribution.model = 'std')
uso_full_spec <- ugarchspec(variance.model = list(garchOrder = c(1,1),
external.regressors = uso_ext),
mean.model = list(armaOrder = c(0,0),
include.mean = FALSE),
distribution.model = 'std')
uga_full_spec <- ugarchspec(variance.model = list(garchOrder = c(1,1),
external.regressors = uga_ext),
mean.model = list(armaOrder = c(0,0),
include.mean = FALSE),
distribution.model = 'std')
CORN_full <- ugarchfit(data = CORN$TDa, spec = corn_full_spec, solver = 'hybrid')
SOYB_full <- ugarchfit(data = SOYB$TDa, spec = soyb_full_spec, solver = 'hybrid')
WEAT_full <- ugarchfit(data = WEAT$TDa, spec = weat_full_spec, solver = 'hybrid')
USO_full <- ugarchfit(data = USO$TDa, spec = uso_full_spec, solver = 'hybrid')
UGA_full <- ugarchfit(data = UGA$TDa, spec = uga_full_spec, solver = 'hybrid')
CORN_full
SOYB_full
WEAT_full
SOYB_full
WEAT_full
WEAT_full
plot(log(CORN$Volume), CORN$Volatility)
par(mfrow = c(3, 2))
plot(log(CORN$Volume), CORN$Volatility)
plot(log(SOYB$Volume), SOYB$Volatility)
plot(log(WEAT$Volume), WEAT$Volatility)
plot(log(USO$Volume), USO$Volatility)
plot(log(UGA$Volume), UGA$Volatility)
a <- lm(log(CORN$Volume) ~ CORN$Volatility)
par(mfrow = c(3, 2), mai = c(0.5, 0.65, 0.2, 0.05))
plot(log(CORN$Volume), CORN$Volatility)
plot(log(SOYB$Volume), SOYB$Volatility)
plot(log(WEAT$Volume), WEAT$Volatility)
plot(log(USO$Volume), USO$Volatility)
plot(log(UGA$Volume), UGA$Volatility)
plot(log(CORN$Volume), CORN$Volatility, main = "CORN")
plot(log(CORN$Volume), CORN$Volatility, main = "CORN   Log-Level")
plot(log(SOYB$Volume), SOYB$Volatility, main = "SOYB")
plot(log(WEAT$Volume), WEAT$Volatility, main = "WEAT")
plot(log(USO$Volume), USO$Volatility, main = "USO")
plot(log(UGA$Volume), UGA$Volatility, main = "UGA")
par(mfrow = c(3, 2), mai = c(0.5, 0.65, 0.2, 0.05))
plot(log(CORN$Volume), log(CORN$Volatility), main = "CORN   Log-Log")
plot(log(SOYB$Volume), log(SOYB$Volatility), main = "SOYB")
plot(log(WEAT$Volume), log(WEAT$Volatility), main = "WEAT")
plot(log(USO$Volume), log(USO$Volatility), main = "USO")
plot(log(UGA$Volume), log(UGA$Volatility), main = "UGA")
setwd("~/Documents/etf_tracking/Analysis/GARCH")
corn_out <- c(CORN$Date, CORN$TDa, CORN$Volatility, CORN$Volume, CORN$Roll)
corn_out <- CORN[c("DATE", "TDa")]
corn_out <- CORN[c("Date", "TDa")]
View(corn_out)
write.csv(corn_out, "corn.csv")
corn_out <- c(CORN$Date, CORN$TDa, CORN$Volatility, CORN$Volume, CORN$Roll)
corn_out <- CORN[c("Date", "TDa", "Volatility", "Volume", "Roll")]
soyb_out <- SOYB[c("Date", "TDa", "Volatility", "Volume", "Roll")]
weat_out <- WEAT[c("Date", "TDa", "Volatility", "Volume", "Roll")]
uso_out <- USO[c("Date", "TDa", "Volatility", "Volume", "Roll")]
uga_out <- UGA[c("Date", "TDa", "Volatility", "Volume", "Roll")]
write.csv(corn_out, "corn.csv")
write.csv(soyb_out, "soyb.csv")
write.csv(weat_out, "weat.csv")
write.csv(uso_out, "uso.csv")
write.csv(uga_out, "uga.csv")
