summary(x)
sd(x)
length(x)
x <- USO$USO_MID
summary(x)
sd(x)
length(x)
x <- USO$USO_NAV
summary(x)
sd(x)
length(x)
x <- USO$Futures
summary(x)
sd(x)
length(x)
x <- UGA$UGA_MID
summary(x)
sd(x)
length(x)
x <- UGA$UGA_NAV
summary(x)
sd(x)
length(x)
x <- UGA$Futures
summary(x)
sd(x)
length(x)
x <- CORN$per_ETF_return
summary(x)
sd(x)
length(x)
x <- CORN$per_nav_return
summary(x)
sd(x)
length(x)
x <- CORN$per_asset_return
summary(x)
sd(x)
length(x)
x <- SOYB$per_etf_return
summary(x)
sd(x)
length(x)
x <- SOYB$per_ETF_return
summary(x)
sd(x)
length(x)
x <- SOYB$per_nav_return
summary(x)
sd(x)
length(x)
x <- SOYB$per_asset_return
summary(x)
sd(x)
length(x)
x <- WEAT$per_ETF_return
summary(x)
sd(x)
length(x)
x <- WEAT$per_nav_return
summary(x)
sd(x)
length(x)
x <- WEAT$per_asset_return
summary(x)
sd(x)
length(x)
x <- USO$per_ETF_return
summary(x)
sd(x)
length(x)
x <- USO$per_nav_return
summary(x)
sd(x)
length(x)
x <- USO$per_asset_return
summary(x)
sd(x)
length(x)
x <- UGA$per_asset_return
summary(x)
sd(x)
x <- UGA$per_ETF_return
summary(x)
sd(x)
length(x)
x <- UGA$per_nav_return
summary(x)
sd(x)
length(x)
x <- UGA$per_asset_return
summary(x)
sd(x)
length(x)
x <- (CORN$per_ETF_return - CORN$per_asset_return)
y <- (CORN$per_nav_return - CORN$per_asset_return)
z <- (CORN$per_ETF_return - CORN$per_nav_return)
summary(x)
sd(x)
length(x)
summary(y)
sd(y)
length(y)
summary(z)
sd(z)
length(z)
x <- (SOYB$per_ETF_return - SOYB$per_asset_return)
y <- (SOYB$per_nav_return - SOYB$per_asset_return)
z <- (SOYB$per_ETF_return - SOYB$per_nav_return)
summary(x)
sd(x)
length(x)
summary(y)
sd(y)
length(y)
summary(z)
sd(z)
length(z)
x <- (WEAT$per_ETF_return - WEAT$per_asset_return)
y <- (WEAT$per_nav_return - WEAT$per_asset_return)
z <- (WEAT$per_ETF_return - WEAT$per_nav_return)
summary(x)
sd(x)
length(x)
summary(y)
sd(y)
length(y)
summary(z)
sd(z)
length(z)
x <- (USO$per_ETF_return - USO$per_asset_return)
y <- (USO$per_nav_return - USO$per_asset_return)
z <- (USO$per_ETF_return - USO$per_nav_return)
summary(x)
sd(x)
length(x)
summary(y)
sd(y)
length(y)
summary(z)
sd(z)
length(z)
x <- (UGA$per_ETF_return - UGA$per_asset_return)
y <- (UGA$per_nav_return - UGA$per_asset_return)
z <- (UGA$per_ETF_return - UGA$per_nav_return)
summary(x)
sd(x)
length(x)
summary(y)
sd(y)
length(y)
plot(WEAT$DATE, (WEAT$per_nav_return - WEAT$per_asset_return), type = "l", main = "WEAT",
xlab = "", ylab = "Tracking Difference")
plot(WEAT$DATE, (WEAT$per_ETF_return - WEAT$per_nav_return), type = "l", main = "WEAT",
xlab = "", ylab = "Tracking Difference")
x <- (UGA$per_ETF_return - UGA$per_asset_return)
y <- (UGA$per_nav_return - UGA$per_asset_return)
z <- (UGA$per_ETF_return - UGA$per_nav_return)
summary(x)
sd(x)
length(x)
summary(y)
summary(z)
sd(z)
length(z)
summary(y)
sd(y)
length(y)
summary(z)
sd(z)
length(z)
data_pull("CORN")
data_pull("CORN")
data_pull <- function(TICKER){
if(TICKER == "CORN"){
print("CORN")
}
}
data_pull("CORN")
data_pull <- function(TICKER){
if(TICKER == "CORN"){
print("test")
}
}
data_pull("CORN")
###############################################################################
#### Data Preprocessing #######################################################
###############################################################################
# Colburn Hassman
# colburn7@vt.edu
# January 25, 2021
# This code defines two data_pull functions, which then called in by other
# R scripts to import, clean, and do some preprocessing of the ETF data
# data_pull_in <- data pull inclusive of roll dates (same as file org)
# data_pull_ex <- exclusive of roll dates (includes benchmark)
data_pull <- function(TICKER){
if(TICKER == "CORN"){
}else if (TICKER == "SOYB"){
}else{
print("Error: Ticker not recognized")
}
}
data_pull("CORN")
data_pull <- function(TICKER){
if(TICKER == "CORN"){
}else if (TICKER == "SOYB"){
}else{
print("Error: Ticker not recognized")
}
}
data_pull <- function(TICKER){
if(TICKER == "CORN"){
print("test_corn")
}else if (TICKER == "SOYB"){
print("Test beans")
}else{
print("Error: Ticker not recognized")
}
}
setwd("~/Documents/etf_tracking/Analysis")
setwd("~/Documents/etf_tracking/Analysis")
data_pull("SOYB")
data_pull("SOY")
CORN <- read.csv("~/Documents/etf_tracking/Data/DB_in/CORN_in")
CORN <- read.csv("~/Documents/etf_tracking/Data/DB_in/CORN_in.csv")
View(CORN)
View(CORN)
CORN <- CORN[order(CORN$Date)]
CORN <- CORN[order(CORN$Date),]
CORN$Date <- as.Date(CORN$Date, format = "%Y%m%d")
CORN <- CORN[order(CORN$Date),]
CORN <- read.csv("~/Documents/etf_tracking/Data/DB_in/CORN_in.csv")
typeof(CORN$Date)
CORN$Date <- as.Date(CORN$Date, format = "%Y-%m%-d")
typeof(CORN$Date)
CORN <- read.csv("~/Documents/etf_tracking/Data/DB_in/CORN_in.csv")
typeof(CORN$Date)
CORN$Date <- as.Date(CORN$Date, format = "%Y-%m-%d")
typeof(CORN$Date)
CORN$Date <- as.Date(CORN$Date, format = "%Y-%m-%d")
CORN <- CORN[order(CORN$Date),]
setwd("~/Documents/etf_tracking/Analysis/CAPM")
source("~/Documents/etf_tracking/Analysis/preprocessing.R")
data_pull("SOY")
data_pull("SOYB")
source('~/Documents/etf_tracking/Analysis/preprocessing.R')
# Calculate Returns
CORN$per_ETF_return <- log(CORN$Price/lag(CORN$Price) * 100)
# Calculate Returns
CORN$per_ETF_return <- lag(CORN$Price)
### Import Packages
library(tidyverse)
# Calculate Returns
CORN$per_ETF_return <- lag(CORN$Price)
# Calculate Returns
CORN$per_ETF_return <- log(CORN$Price/lag(CORN$Price)) * 100
# Calculate Premiums/Discounts
CORN$PD <- (CORN$Price-CORN$NAV)/CORN$NAV
source('~/Documents/etf_tracking/Analysis/preprocessing.R')
CORN <- data_pull("CORN")
source("~/Documents/etf_tracking/Analysis/preprocessing.R")
source("~/Documents/etf_tracking/Analysis/preprocessing.R")
source('~/Documents/etf_tracking/Analysis/preprocessing.R')
source("~/Documents/etf_tracking/Analysis/preprocessing.R")
CORN <- data_pull("CORN")
source('~/Documents/etf_tracking/Analysis/preprocessing.R')
source("~/Documents/etf_tracking/Analysis/preprocessing.R")
CORN <- data_pull("CORN")
# Data pull inclusive of roll dates (full set, only Price and NAV)
data_pull_in <- function(TICKER){
if(TICKER == "CORN"){
CORN <- read.csv("~/Documents/etf_tracking/Data/DB_in/CORN_in.csv")
# Set date as date and ensure it is ordered
CORN$Date <- as.Date(CORN$Date, format = "%Y-%m-%d")
CORN <- CORN[order(CORN$Date),]
# Calculate log Returns
CORN$per_ETF_return <- log(CORN$Price/lag(CORN$Price)) * 100
CORN$per_NAV_return <- log(CORN$NAV/lag(CORN$NAV)) * 100
# Calculate Tracking Differences
CORN$TDa <- CORN$per_ETF_return - CORN$per_NAV_return
# Calculate Premiums/Discounts
CORN$PD <- (CORN$Price-CORN$NAV)/CORN$NAV
# Return the cleaned and processed Dataframe
return(CORN)
}else if (TICKER == "SOYB"){
print("Test beans")
}else{
print("Error: Ticker not recognized")
}
}
source("~/Documents/etf_tracking/Analysis/preprocessing.R")
CORN <- data_pull("CORN")
###############################################################################
#### Data Preprocessing #######################################################
###############################################################################
# Colburn Hassman
# colburn7@vt.edu
# January 25, 2021
# This code defines two data_pull functions, which then called in by other
# R scripts to import, clean, and do some preprocessing of the ETF data
# data_pull_in <- data pull inclusive of roll dates (same as file org)
# data_pull_ex <- exclusive of roll dates (includes benchmark)
# The user inputs the ticker as a string and the function returns a cleaned
# dataframe for that ETF including returns and TD calculations
### Import Packages
library(tidyverse)
# Data pull inclusive of roll dates (full set, only Price and NAV)
data_pull_in <- function(TICKER){
if(TICKER == "CORN"){
CORN <- read.csv("~/Documents/etf_tracking/Data/DB_in/CORN_in.csv")
# Set date as date and ensure it is ordered
CORN$Date <- as.Date(CORN$Date, format = "%Y-%m-%d")
CORN <- CORN[order(CORN$Date),]
# Calculate log Returns
CORN$per_ETF_return <- log(CORN$Price/lag(CORN$Price)) * 100
CORN$per_NAV_return <- log(CORN$NAV/lag(CORN$NAV)) * 100
# Calculate Tracking Differences
CORN$TDa <- CORN$per_ETF_return - CORN$per_NAV_return
# Calculate Premiums/Discounts
CORN$PD <- (CORN$Price-CORN$NAV)/CORN$NAV
# Return the cleaned and processed Dataframe
return(CORN)
}else if (TICKER == "SOYB"){
print("Test beans")
}else{
print("Error: Ticker not recognized")
}
}
print("Function pulled")
#data_pull("CORN")
#read.csv("~/Documents/etf_tracking/Data/DB_in/")
### Import Packages
library(tidyverse)
# Data pull inclusive of roll dates (full set, only Price and NAV)
data_pull_in <- function(TICKER){
if(TICKER == "CORN"){
CORN <- read.csv("~/Documents/etf_tracking/Data/DB_in/CORN_in.csv")
# Set date as date and ensure it is ordered
CORN$Date <- as.Date(CORN$Date, format = "%Y-%m-%d")
CORN <- CORN[order(CORN$Date),]
# Calculate log Returns
CORN$per_ETF_return <- log(CORN$Price/lag(CORN$Price)) * 100
CORN$per_NAV_return <- log(CORN$NAV/lag(CORN$NAV)) * 100
# Calculate Tracking Differences
CORN$TDa <- CORN$per_ETF_return - CORN$per_NAV_return
# Calculate Premiums/Discounts
CORN$PD <- (CORN$Price-CORN$NAV)/CORN$NAV
# Return the cleaned and processed Dataframe
return(CORN)
}else if (TICKER == "SOYB"){
print("Test beans")
}else{
print("Error: Ticker not recognized")
}
}
print("Function pulled")
source('~/Documents/etf_tracking/Analysis/preprocessing.R')
source("~/Documents/etf_tracking/Analysis/preprocessing.R")
CORN <- data_pull("CORN")
CORN <- data_pull_in("CORN")
View(CORN)
SOYB <- read.csv("~/Documents/etf_tracking/Data/DB_in/SOYB_in.csv")
SOYB$Date <- as.Date(SOYB$Date, format = "%Y-%m-%d")
SOYB <- SOYB[order(SOYB$Date),]
SOYB$per_ETF_return = log(SOYB$Price/lag(SOYB$price)) * 100
SOYB$per_NAV_return <- log(SOYB$NAV/lag(SOYB$NAV)) * 100
SOYB$TDa <- SOYB$per_ETF_return - SOYB$per_NAV_return
SOYB$PD <- (SOYB$Price - SOYB$NAV)/SOYB$NAV
if(TICKER == "CORN"){
CORN <- read.csv("~/Documents/etf_tracking/Data/DB_in/CORN_in.csv")
# Set date as date and ensure it is ordered
CORN$Date <- as.Date(CORN$Date, format = "%Y-%m-%d")
CORN <- CORN[order(CORN$Date),]
# Calculate log Returns
CORN$per_ETF_return <- log(CORN$Price/lag(CORN$Price)) * 100
CORN$per_NAV_return <- log(CORN$NAV/lag(CORN$NAV)) * 100
# Calculate Tracking Differences
CORN$TDa <- CORN$per_ETF_return - CORN$per_NAV_return
# Calculate Premiums/Discounts
CORN$PD <- (CORN$Price-CORN$NAV)/CORN$NAV
# Return the cleaned and processed Dataframe
return(CORN)
}else if (TICKER == "SOYB"){
SOYB <- read.csv("~/Documents/etf_tracking/Data/DB_in/SOYB_in.csv")
SOYB$Date <- as.Date(SOYB$Date, format = "%Y-%m-%d")
SOYB <- SOYB[order(SOYB$Date),]
SOYB$per_ETF_return = log(SOYB$Price/lag(SOYB$Price)) * 100
SOYB$per_NAV_return <- log(SOYB$NAV/lag(SOYB$NAV)) * 100
SOYB$TDa <- SOYB$per_ETF_return - SOYB$per_NAV_return
SOYB$PD <- (SOYB$Price - SOYB$NAV)/SOYB$NAV
}else if (TICKER == "WEAT"){
}else if (TICKER == "USO"){
}else if (TICKER == "UGA")
else{
print("Error: Ticker not recognized")
}
SOYB <- read.csv("~/Documents/etf_tracking/Data/DB_in/SOYB_in.csv")
SOYB$Date <- as.Date(SOYB$Date, format = "%Y-%m-%d")
SOYB <- SOYB[order(SOYB$Date),]
SOYB$per_ETF_return = log(SOYB$Price/lag(SOYB$Price)) * 100
SOYB$per_NAV_return <- log(SOYB$NAV/lag(SOYB$NAV)) * 100
SOYB$TDa <- SOYB$per_ETF_return - SOYB$per_NAV_return
SOYB$PD <- (SOYB$Price - SOYB$NAV)/SOYB$NAV
View(SOYB)
source('~/Documents/etf_tracking/Analysis/preprocessing.R')
source('~/Documents/etf_tracking/Analysis/preprocessing.R')
source('~/Documents/etf_tracking/Analysis/preprocessing.R')
source('~/Documents/etf_tracking/Analysis/preprocessing.R')
source('~/Documents/etf_tracking/Analysis/preprocessing.R')
source('~/Documents/etf_tracking/Analysis/preprocessing.R')
source('~/Documents/etf_tracking/Analysis/preprocessing.R')
CORN <- data_pull_in("CORN")
source("~/Documents/etf_tracking/Analysis/preprocessing.R")
CORN <- data_pull_in("CORN")
SOYB <- data_pull_in("SOYB")
CORN <- data_pull_in("CORN")
SOYB <- data_pull_in("SOYB")
WEAT <- data_pull_in("WEAT")
USO <- data_pull_in("USO")
UGA <- data_pull_in("UGA")
source('~/Documents/etf_tracking/Analysis/preprocessing.R')
source("~/Documents/etf_tracking/Analysis/preprocessing.R")
CORN <- data_pull_in("CORN")
SOYB <- data_pull_in("SOYB")
WEAT <- data_pull_in("WEAT")
USO <- data_pull_in("USO")
UGA <- data_pull_in("UGA")
View(UGA)
# Pull in data from CSV
ETF <- read.csv("~/Documents/etf_tracking/Data/DB_ex/CORN_ex.csv")
#Set Date as Date type and order by date
ETF$DATE <- as.Date(ETF$DATE, format = "%m/%d/%Y")
ETF <- ETF[order(ETF$DATE),]
# Pull in data from CSV
ETF <- read.csv("~/Documents/etf_tracking/Data/DB_ex/CORN_ex.csv")
#Set Date as Date type and order by date
ETF$DATE <- as.Date(ETF$DATE, format = "%m/%d/%Y")
ETF <- ETF[order(ETF$DATE),]
# Reconstruct Asset Basket
ETF$asset_basket <- (ETF$`F1..35.` * 0.35) + (ETF$`F2..3.` * 0.3) + (ETF$`F3..35.` * 0.35)
# Calculate Returns
ETF$per_asset_return <- log(ETF$asset_basket/lag(ETF$asset_basket))* 100 # calculate percent asset basket return
ETF$per_ETF_return <- log(ETF$Price/lag(ETF$Price)) * 100#calculate percent ETF return
ETF$per_NAV_return <- log(ETF$NAV/lag(ETF$NAV)) * 100 # Calculate NAV Return
# Calculate Tracking Differences
ETF$TD <- ETF$per_ETF_return - ETF$per_asset_return
ETF$TDa <- ETF$per_ETF_return - ETF$per_NAV_return
ETF_TDm <- ETF$per_NAV_return - ETF$per_asset_return
# Calculate Premiums/Discounts
ETF$PD <- (ETF$Price-ETF$NAV)/ETF$NAV
ETF$TDm <- ETF$per_NAV_return - ETF$per_asset_return
View(ETF)
source('~/Documents/etf_tracking/Analysis/preprocessing.R')
source('~/Documents/etf_tracking/Analysis/preprocessing.R')
source("~/Documents/etf_tracking/Analysis/preprocessing.R")
CORN <- data_pull_ex("CORN")
SOYB <- data_pull_ex("SOYB")
WEAT <- data_pull_ex("WEAT")
USO <- data_pull_ex("USO")
UGA <- data_pull_ex("UGA")
ETF <- read.csv("~/Documents/etf_tracking/Data/DB_ex/USO_ex.csv")
ETF$DATE <- as.Date(ETF$DATE, format = "%m/%d/%Y")
ETF <- ETF[order(ETF$DATE),]
ETF$per_asset_return <- log(ETF$Futures/lag(ETF$Futures))* 100
ETF$per_ETF_return <- log(ETF$Price/lag(ETF$Price)) * 100
ETF$per_NAV_return <- log(ETF$NAV/lag(ETF$NAV)) * 100
ETF$TD <- ETF$per_ETF_return - ETF$per_asset_return
ETF$TDa <- ETF$per_ETF_return - ETF$per_NAV_return
ETF$TDm <- ETF$per_NAV_return - ETF$per_asset_return
ETF$PD <- (ETF$Price-ETF$NAV)/ETF$NAV
source('~/Documents/etf_tracking/Analysis/preprocessing.R')
source("~/Documents/etf_tracking/Analysis/preprocessing.R")
CORN <- data_pull_ex("CORN")
SOYB <- data_pull_ex("SOYB")
WEAT <- data_pull_ex("WEAT")
USO <- data_pull_ex("USO")
UGA <- data_pull_ex("UGA")
View(USO)
# Delete Roll indicator column
ETF$ROLL <- NULL
# Pull in data from CSV
ETF <- read.csv("~/Documents/etf_tracking/Data/DB_ex/CORN_ex.csv")
#Set Date as Date type and order by date
ETF$DATE <- as.Date(ETF$DATE, format = "%m/%d/%Y")
ETF <- ETF[order(ETF$DATE),]
# Reconstruct Asset Basket
ETF$asset_basket <- (ETF$`F1..35.` * 0.35) + (ETF$`F2..3.` * 0.3) + (ETF$`F3..35.` * 0.35)
# Calculate Returns
ETF$per_asset_return <- log(ETF$asset_basket/lag(ETF$asset_basket))* 100
ETF$per_ETF_return <- log(ETF$Price/lag(ETF$Price)) * 100
ETF$per_NAV_return <- log(ETF$NAV/lag(ETF$NAV)) * 100
# Calculate Tracking Differences
ETF$TD <- ETF$per_ETF_return - ETF$per_asset_return
ETF$TDa <- ETF$per_ETF_return - ETF$per_NAV_return
ETF$TDm <- ETF$per_NAV_return - ETF$per_asset_return
# Calculate Premiums/Discounts
ETF$PD <- (ETF$Price-ETF$NAV)/ETF$NAV
# omit Roll Dates
ETF <- ETF[!(ETF$ROLL == 1),]
# Delete Roll indicator column
ETF$ROLL <- NULL
# Return data
return(ETF)
View(ETF)
source('~/Documents/etf_tracking/Analysis/preprocessing.R')
source('~/Documents/etf_tracking/Analysis/preprocessing.R')
source("~/Documents/etf_tracking/Analysis/preprocessing.R")
CORN <- data_pull_ex("CORN")
SOYB <- data_pull_ex("SOYB")
WEAT <- data_pull_ex("WEAT")
USO <- data_pull_ex("USO")
UGA <- data_pull_ex("UGA")
