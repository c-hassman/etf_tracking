qplot(WEAT$DATE, ((WEAT$WEAT_MID - WEAT$WEAT_NAV)/WEAT$WEAT_NAV * 100), geom = 'line') +
theme_bw() + ylab("Premium/Discount (%)") + xlab("Date") + ggtitle("WEAT Premium/Discount to NAV")
#-------------------OLS-----------------------------------------------#
#--------Simple
simple <- lm(per_asset_return ~ per_ETF_return, data = WEAT)
summary(simple)
#--------Dummy
model <- lm(abs(WEAT$etf_asset_error) ~ abs(WEAT$per_ETF_return) + WEAT$`W WASDE` + WEAT$`W WASDE + CP` +
WEAT$`W Grain Stocks` + WEAT$`W Prospective Plantings` + WEAT$`W Acreage Report` +
WEAT$`W Cattle on Feed` + WEAT$`W Hogs & Pigs` + WEAT$`W Day Before Roll` + WEAT$`W Day After Roll` +
WEAT$`W Feb` + WEAT$`W Mar` + WEAT$`W April` + WEAT$`W May` + WEAT$`W June` +
WEAT$`W July` + WEAT$`W Aug` + WEAT$`W Sept` + WEAT$`W Oct` + WEAT$`W Nov` + WEAT$`W Dec` +
WEAT$`W 2013` + WEAT$`W 2014` + WEAT$`W 2015` + WEAT$`W 2016` + WEAT$`W 2017` +
WEAT$`W 2018` + WEAT$W2019 + WEAT$W2020)
summary(model)
#---------------------GARCH----------------------------------------------#
err_garch = tseries::garch(x = WEAT$etf_asset_error, order = c(1,1))
summary(err_garch)
#--GARCH Volatility Graph
# This graphs the Volatility from the GARCH model versus the market returns
vol = err_garch$fitted.values # assign the fitted values to a variable
#---------------------GARCH----------------------------------------------#
err_garch = tseries::garch(x = WEAT$etf_asset_error, order = c(1,1))
summary(err_garch)
#--GARCH Volatility Graph
# This graphs the Volatility from the GARCH model versus the market returns
vol = err_garch$fitted.values # assign the fitted values to a variable
vol = data.frame(vol) # convert to a dataframe
vol$Volatility = vol$sigt # Create a new column of sigt squared
vol$Date = WEAT$DATE # Assign the date column from corn to vol
vol$'Asset Return ^2' = WEAT$per_asset_return ^2 # add the per asset returns
# Convert the data to a long format
vol_long <- vol %>%
select(Date, Volatility, 'Asset Return ^2') %>%
gather(key = 'variable', value = 'value', -Date)
# Make Graph
ggplot(vol_long, aes(x = Date, y = value)) +
geom_line(aes(color = variable)) +
scale_color_manual(values = c("darkred", "steelblue")) +
facet_grid(rows = vars(variable), scales = "free") +
theme_bw() + theme(legend.position = "none") +
ylab("Percent (%)") + ggtitle("WEAT Asset Basket Return and Volatility Plot")
rm(list = ls())
library(readxl)
library(tidyverse)
#-----------------Import Data from Excel and order------------#
UGA <- read_excel("G:/My Drive/3_Massa Research/Neff Paper/Working_Folder/Data_Update.xlsx",
sheet = "UGA", col_types = c("date",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric"))
UGA <- UGA[order(UGA$DATE),]
#-----------------------Calculate Returns and Errors--------------#
UGA$per_asset_return <- log(UGA$Futures/lag(UGA$Futures))
UGA$per_ETF_return <- log(UGA$UGA_MID/lag(UGA$UGA_MID))
UGA$per_NAV_return <- log(UGA$UGA_NAV/lag(UGA$UGA_NAV))
UGA$etf_asset_error <- UGA$per_ETF_return - UGA$per_asset_return
UGA <- na.omit(UGA)
#----------------------Exploratory Plot--------------------------#
#------ETF, Asset Basket Error
qplot(UGA$DATE, (UGA$etf_asset_error * 100), geom = 'line') + theme_bw() +
ggtitle("Daily Return Error: UGA ETF - Asset Basket") + ylab("Error (%)") +
xlab("Date")
#-----ETF and Asset Basket
etfcolor <- "black"
assetcolor <- "darkgrey"
coeff <- UGA$Futures[1] / UGA$UGA_MID[1]
ggplot(data = UGA, aes(x = DATE)) +
geom_line(aes(y = UGA_MID), color = etfcolor) +
geom_line(aes(y = Futures / coeff), color = assetcolor) +
scale_y_continuous(
name = 'ETF Price ($)',
sec.axis = sec_axis(~.*coeff, name = "Asset Basket Price (Dollars per Gallon)")
) + theme_bw() + ggtitle("UGA ETF and Asset Basket Price") + xlab("Date")
#----Premium/Discount to NAV
qplot(UGA$DATE, ((UGA$UGA_MID - UGA$UGA_NAV)/UGA$UGA_NAV * 100), geom = 'line') +
theme_bw() + ylab("Premium/Discount (%)") + xlab("Date") + ggtitle("UGA Premium/Discount to NAV")
#-------------------OLS-----------------------------------------------#
#--------Simple
simple <- lm(per_asset_return ~ per_ETF_return, data = UGA)
summary(simple)
#--------Dummy
model <- lm(abs(UGA$etf_asset_error) ~ abs(UGA$per_ETF_return) + UGA$`RB Day Before Roll` + UGA$`RB Day After Roll` +
UGA$`RB Feb` + UGA$`RB Mar` + UGA$`RB April` + UGA$`RB May` + UGA$`RB June` + UGA$`RB July` +
UGA$`RB Aug` + UGA$`RB Sept` + UGA$`RB Oct` + UGA$`RB Nov` + UGA$`RB Dec` + UGA$`RB 2013` +
UGA$`RB 2014` + UGA$`RB 2015` + UGA$`RB 2016` + UGA$`RB 2017` + UGA$`RB 2018` + UGA$`RB 2019` +
UGA$`RB 2020` + UGA$`RB STEO` + UGA$`RB Drilling Prod` + UGA$`RB Petro Supply/Prod` + UGA$`RB Annual Energy Outlook`)
summary(model)
#---------------------GARCH----------------------------------------------#
err_garch = tseries::garch(x = UGA$etf_asset_error, order = c(1,1))
summary(err_garch)
#--GARCH Volatility Graph
# This graphs the Volatility from the GARCH model versus the market returns
vol = err_garch$fitted.values # assign the fitted values to a variable
vol = data.frame(vol) # convert to a dataframe
#--------Dummy
model <- lm(abs(UGA$etf_asset_error) ~ abs(UGA$per_ETF_return) + UGA$`RB Day Before Roll` + UGA$`RB Day After Roll` +
UGA$`RB Feb` + UGA$`RB Mar` + UGA$`RB April` + UGA$`RB May` + UGA$`RB June` + UGA$`RB July` +
UGA$`RB Aug` + UGA$`RB Sept` + UGA$`RB Oct` + UGA$`RB Nov` + UGA$`RB Dec` + UGA$`RB 2013` +
UGA$`RB 2014` + UGA$`RB 2015` + UGA$`RB 2016` + UGA$`RB 2017` + UGA$`RB 2018` + UGA$`RB 2019` +
UGA$`RB 2020` + UGA$`RB STEO` + UGA$`RB Drilling Prod` + UGA$`RB Petro Supply/Prod` + UGA$`RB Annual Energy Outlook`)
summary(model)
library(quantmod)
start_date <- "2012-01-01"
end_date <- '2020-02-10'
symbols <- c("CORN", 'SOYB', 'WEAT', 'UGA', 'USO')
#Pull Data from Yahoo Finance
quantmod::getSymbols(Symbols = symbols,
src = "yahoo",
index.class = "POSIXct",
from = start_date,
to = end_date,
adjust = FALSE)
rm(list = ls())
#Assign arguments
start_date <- "2012-01-01"
end_date <- '2020-02-10'
symbols <- c("CORN", 'SOYB', 'WEAT', 'UGA', 'USO')
#Pull Data from Yahoo Finance
quantmod::getSymbols(Symbols = symbols,
src = "yahoo",
index.class = "POSIXct",
from = start_date,
to = end_date,
adjust = FALSE)
library(xts)
volume = merge(CORN$CORN.Volume, SOYB$SOYB.Volume)
View(volume)
volume = merge(CORN$CORN.Volume, SOYB$SOYB.Volume, WEAT$WEAT.Volume, USO$USO.Volume, UGA$UGA.Volume)
View(volume)
volume_df = data.frame(DATE = as.Date(index(volume)), volume)
View(volume_df)
setwd("G:/My Drive/3_Massa Research/Neff Paper/Working_Folder")
write.csv(volume_df, "G:/My Drive/3_Massa Research/Neff Paper/Working_Folder")
write.csv(volume_df)
write.csv(volume_df, "G:/My Drive/3_Massa Research/Neff Paper/Working_Folder/Volume.csv")
volume <- read.csv("G:/My Drive/3_Massa Research/Neff Paper/Working_Folder/Volume.csv")
rm(list=ls())
library(readxl)
library(tidyverse)
library(ggthemes)
SOYB <- read_excel("G:/My Drive/3_Massa Research/Neff Paper/Working_Folder/Data_Update.xlsx",
sheet = "SOYB", col_types = c("numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric"))
SOYB$DATE <- as.Date(SOYB$DATE, origin = "1899-12-30")
SOYB <- SOYB[order(SOYB$DATE),]
SOYB$asset_basket <- (SOYB$`F1(.35)` * 0.35) + (SOYB$`F2(.3)` * 0.30) + (SOYB$`F3(.35)` * 0.35)
#-------------------------Calculate Returns and Errors------------------------------#
SOYB$per_asset_return <- log(SOYB$asset_basket / lag(SOYB$asset_basket))
SOYB$per_ETF_return <- log(SOYB$SOYB_MID / lag(SOYB$SOYB_MID))
SOYB$per_NAV_return <- log(SOYB$SOYB_NAV / lag(SOYB$SOYB_NAV))
SOYB$etf_asset_error <- SOYB$per_ETF_return - SOYB$per_asset_return
volume <- read.csv("G:/My Drive/3_Massa Research/Neff Paper/Working_Folder/Volume.csv")
SOYB_1 <- merge(SOYB, volume$SOYB.Volume, by = "DATE")
SOYB_1 <- merge(SOYB, volume$SOYB.Volume, by = "DATE")
volume <- read.csv("G:/My Drive/3_Massa Research/Neff Paper/Working_Folder/Volume.csv")
volume <- data.frame(volume$DATE, volume$SOYB.Volume)
SOYB_1 <- merge(SOYB, volume, by = "DATE")
View(SOYB)
View(volume)
View(volume)
View(volume)
volume <- read.csv("G:/My Drive/3_Massa Research/Neff Paper/Working_Folder/Volume.csv")
View(volume)
#-----------------------Add ETF Volume Data-----------------------#
# Import volume data from csv
volume <- read.csv("G:/My Drive/3_Massa Research/Neff Paper/Working_Folder/Volume.csv")
# subset the dataframe to only the relevant columes
volume <- data.frame(volume$DATE, volume$SOYB.Volume)
#rename the columns
colnames(volume) <- c("DATE", "Volume")
#Merge the Volume data with the other data
SOYB_1 <- merge(SOYB, volume$SOYB.Volume, by = "DATE")
#Merge the Volume data with the other data
SOYB_1 <- merge(SOYB, volume, by = "DATE")
View(SOYB)
SOYB$DATE
volume$DATE
#-----------------------Add ETF Volume Data-----------------------#
# Import volume data from csv
volume <- read.csv("G:/My Drive/3_Massa Research/Neff Paper/Working_Folder/Volume.csv")
# subset the dataframe to only the relevant columes
volume <- data.frame(as.Date(volume$DATE), volume$SOYB.Volume)
#rename the columns
colnames(volume) <- c("DATE", "Volume")
#Merge the Volume data with the other data
SOYB_1 <- merge(SOYB, volume, by = "DATE")
View(SOYB_1)
#Remove rows with NA
SOYB <- na.omit(SOYB)
rm(list = ls())
library(readxl)
library(tidyverse)
library(ggthemes)
library(xts)
#-----------------Import Data from Excel and order------------#
CORN <- read_excel("G:/My Drive/3_Massa Research/Neff Paper/Working_Folder/Data_Update.xlsx",
sheet = "CORN", col_types = c("numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric"))
CORN$DATE <- as.Date(CORN$DATE, origin = "1899-12-30")
# Note: If I import the Date column as a "Date" using readxl, it includes a timezone character
# which creates issue when I merge this df and the volume df. also need to store the data in
# excel as a
CORN <- CORN[order(CORN$DATE),] # order by date
CORN$asset_basket <- (CORN$`F1(.35)` * 0.35) + (CORN$`F2(.3)` * 0.3) + (CORN$`F3(.35)` * 0.35) #reconstruct asset basket
#-----------------------Calculate Returns and Errors--------------#
CORN$per_asset_return <- log(CORN$asset_basket/lag(CORN$asset_basket)) # calculate percent asset basket return
CORN$per_ETF_return <- log(CORN$CORN_MID/lag(CORN$CORN_MID)) #calculate percent ETF return
CORN$per_NAV_return <- log(CORN$CORN_NAV/lag(CORN$CORN_NAV)) #calculate percent NAV return
CORN$etf_asset_error <- CORN$per_ETF_return - CORN$per_asset_return #calculate error between ETF and Asset
#-----------------------Add ETF Volume Data-----------------------#
# Import volume data from csv
volume <- read.csv("G:/My Drive/3_Massa Research/Neff Paper/Working_Folder/Volume.csv")
# subset the dataframe to only the relevant columes
volume <- data.frame(as.Date(volume$DATE), volume$CORN.Volume)
#rename the columns
colnames(volume) <- c("DATE", "Volume")
#Merge the Volume data with the other data
CORN <- merge(CORN, volume, by = "DATE")
#Remove rows with NA
CORN <- na.omit(CORN) #Omit the rows with NAs, which are the final roll days
View(CORN)
volume <- lm(abs(CORN$etf_asset_error ~  abs(CORN$per_asset_return) + CORN$Volume))
summary(volume)
#Remove rows with NA
CORN <- na.omit(CORN) #Omit the rows with NAs, which are the final roll days
volume_mod <- lm(abs(CORN$etf_asset_error ~  abs(CORN$per_asset_return) + CORN$Volume))
is.numeric(CORN$Volume)
is.numeric(CORN$etf_asset_error)
is.numeric(CORN$per_asset_return)
volume_mod <- lm(abs(CORN$etf_asset_error) ~  abs(CORN$per_asset_return) + CORN$Volume)
summary(volume_mod)
install.packages('FinTS')
rm(list = ls())
library(readxl)
library(tidyverse)
library(ggthemes)
library(xts)
library(tidyr)
library(zoo)
library(rugarch)
library(skedastic)
library(fpp2)
#-----------------Import Data from Excel and order------------#
CORN <- read_excel("G:/My Drive/3_Massa Research/Neff Paper/Working_Folder/Data_Update.xlsx",
sheet = "CORN", col_types = c("numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric"))
CORN$DATE <- as.Date(CORN$DATE, origin = "1899-12-30")
# Note: If I import the Date column as a "Date" using readxl, it includes a timezone character
# which creates issue when I merge this df and the volume df.
# The data is imported in excel date numbers, which is why I need to set the origin to the proper amount
CORN <- CORN[order(CORN$DATE),] # order by date
#-----------------------Calculate Returns and Errors--------------#
CORN$asset_basket <- (CORN$`F1(.35)` * 0.35) + (CORN$`F2(.3)` * 0.3) + (CORN$`F3(.35)` * 0.35) #reconstruct asset basket
CORN$per_asset_return <- log(CORN$asset_basket/lag(CORN$asset_basket))* 100 # calculate percent asset basket return
CORN$per_ETF_return <- log(CORN$CORN_MID/lag(CORN$CORN_MID)) * 100#calculate percent ETF return
CORN$per_NAV_return <- log(CORN$CORN_NAV/lag(CORN$CORN_NAV)) * 100#calculate percent NAV return
CORN$etf_asset_error <- CORN$per_ETF_return - CORN$per_asset_return #calculate error between ETF and Asset
#-----------------------Add ETF Volume Data-----------------------#
# Import volume data from csv
volume <- read.csv("G:/My Drive/3_Massa Research/Neff Paper/Working_Folder/Volume.csv")
# subset the dataframe to only the relevant columes
volume <- data.frame(as.Date(volume$DATE), volume$CORN.Volume)
#rename the columns
colnames(volume) <- c("DATE", "Volume")
#Merge the Volume data with the other data
CORN <- merge(CORN, volume, by = "DATE")
# calculate percent change in volume
CORN$volume_return <-log(CORN$Volume/lag(CORN$Volume)) * 100
#Remove rows with NAsm which has the effect of deleting roll days
CORN <- na.omit(CORN)
# This creates rows of NA's for all the missing days, including weekends, holidays,
# and the roll days we just deleted. Not sure why I have to create another "Date"
# column but that is the only way I could get it to work
CORN <- CORN %>%
mutate(Date = as.Date(DATE)) %>%
complete(Date = seq.Date(min(DATE), max(DATE), by="day"))
# Now to forward fill the date
CORN <- na.locf(na.locf(CORN), fromLast = TRUE)
# Remove the additional date column
CORN <- subset(CORN, select = -DATE)
#CORN <- na.omit(CORN)
# Convert the object into a XTS object
CORN.xts <- xts(CORN[,-1], order.by = CORN$Date)
#===Testing for ARCH/GARCH Effects
# Engles LM ARCH Test
FinTS::ArchTest(CORN$)
ext_reg <- CORN.xts # creates a new xts object to hold external regressors
# The code below removes all the columns which are not external regressors.
# There must be a better way to do this
#ext_reg$Date <- NULL
ext_reg$CORN_MID <- NULL
ext_reg$`F1(.35)` <- NULL
ext_reg$`F2(.3)` <- NULL
ext_reg$`F3(.35)` <- NULL
ext_reg$CORN_NAV <- NULL
ext_reg$ROLL <- NULL
#===Testing for ARCH/GARCH Effects
# Engles LM ARCH Test
FinTS::ArchTest(CORN$etf_asset_error)
rm(list = ls())
library(readxl)
library(tidyverse)
library(ggthemes)
library(xts)
library(tidyr)
library(zoo)
library(rugarch)
library(skedastic)
library(fpp2)
#-----------------Import Data from Excel and order------------#
CORN <- read_excel("G:/My Drive/3_Massa Research/Neff Paper/Working_Folder/Data_Update.xlsx",
sheet = "CORN", col_types = c("numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric"))
CORN$DATE <- as.Date(CORN$DATE, origin = "1899-12-30")
# Note: If I import the Date column as a "Date" using readxl, it includes a timezone character
# which creates issue when I merge this df and the volume df.
# The data is imported in excel date numbers, which is why I need to set the origin to the proper amount
CORN <- CORN[order(CORN$DATE),] # order by date
#-----------------------Calculate Returns and Errors--------------#
CORN$asset_basket <- (CORN$`F1(.35)` * 0.35) + (CORN$`F2(.3)` * 0.3) + (CORN$`F3(.35)` * 0.35) #reconstruct asset basket
CORN$per_asset_return <- log(CORN$asset_basket/lag(CORN$asset_basket))* 100 # calculate percent asset basket return
CORN$per_ETF_return <- log(CORN$CORN_MID/lag(CORN$CORN_MID)) * 100#calculate percent ETF return
CORN$per_NAV_return <- log(CORN$CORN_NAV/lag(CORN$CORN_NAV)) * 100#calculate percent NAV return
CORN$etf_asset_error <- CORN$per_ETF_return - CORN$per_asset_return #calculate error between ETF and Asset
#-----------------------Add ETF Volume Data-----------------------#
# Import volume data from csv
volume <- read.csv("G:/My Drive/3_Massa Research/Neff Paper/Working_Folder/Volume.csv")
# subset the dataframe to only the relevant columes
volume <- data.frame(as.Date(volume$DATE), volume$CORN.Volume)
#rename the columns
colnames(volume) <- c("DATE", "Volume")
#Merge the Volume data with the other data
CORN <- merge(CORN, volume, by = "DATE")
# calculate percent change in volume
CORN$volume_return <-log(CORN$Volume/lag(CORN$Volume)) * 100
#Remove rows with NAsm which has the effect of deleting roll days
CORN <- na.omit(CORN)
# This creates rows of NA's for all the missing days, including weekends, holidays,
# and the roll days we just deleted. Not sure why I have to create another "Date"
# column but that is the only way I could get it to work
CORN <- CORN %>%
mutate(Date = as.Date(DATE)) %>%
complete(Date = seq.Date(min(DATE), max(DATE), by="day"))
# Now to forward fill the date
CORN <- na.locf(na.locf(CORN), fromLast = TRUE)
# Remove the additional date column
CORN <- subset(CORN, select = -DATE)
#CORN <- na.omit(CORN)
# Convert the object into a XTS object
CORN.xts <- xts(CORN[,-1], order.by = CORN$Date)
#===Testing for ARCH/GARCH Effects
# Engles LM ARCH Test
FinTS::ArchTest(CORN$etf_asset_error)
arch.order = 1:5
arch.names = paste('arch', arch.order, sep = '')
arch.list = list()
for (p in arch.order) {
arch.spec = ugarchspec(variance.model = list(garchOrder = c(p, 0)),
mean.model = list(armaOrder = c(0, 0)))
arch.fit = ugarchfit(spec = arch.spec, data = CORN$etf_asset_error,
solver.control = list(trace = 0))
arch.list[[p]] = arch.fit
}
names(arch.list) = arch.names
# Add GARCH
garch11.spec = ugarchspec (variance.model = list(garchOrder = c(1,1)),
mean.model = list(armaOrder = c(0,0)))
garch31.spec = ugarchspec (variance.model = list(garchOrder = c(3,1)),
mean.model = list(armaOrder = c(0,0)))
garch11.fit = ugarchfit(spec = garch11.spec, data = CORN$etf_asset_error,
solver.control = list(trace = 1))
garch31.fit = ugarchfit(spec = garch31.spec, data = CORN$etf_asset_error,
solver.control = list(trace = 1))
arch.list$garch11 = garch11.fit
arch.list$garch31 = garch31.fit
# Compute Information Criteria
info.mat = sapply(arch.list, infocriteria)
rownames(info.mat) = rownames(infocriteria(arch.list[[1]]))
info.mat
garch11.fit
arch3.spec = ugarchspec (variance.model = list(garchOrder = c(3,0)),
mean.model = list(armaOrder = c(0,0)))
arch3.fit = ugarchfit(spec = arch3.spec, data = CORN$etf_asset_error,
solver.control = list(trace = 1))
#=========Residual Disgnostics========#
# ARCH(3)
par(mfrow = c(2,2))
plot(CORN$Date, arch3.fit@fit[['residuals']], type= 'line') + ylab('Residuals') +
xlab('Date') + theme_bw()
hist(arch3.fit@fit[['residuals']]) + theme_bw()
acf(arch3.fit@fit[['residuals']])
qqnorm(arch3.fit@fit[['residuals']])
qqline(arch3.fit@fit[['residuals']])
#GARCH(1,1)
par(mfrow = c(2,2))
plot(CORN$Date, garch11.fit@fit[['residuals']], type= 'line') + ylab('Residuals') +
xlab('Date') + theme_bw()
hist(garch11.fit@fit[['residuals']]) + theme_bw()
acf(garch11.fit@fit[['residuals']])
qqnorm(garch11.fit@fit[['residuals']])
qqline(garch11.fit@fit[['residuals']])
arch.fit$coef
arch.fit$coef
coef(arch3.fit)
coef(garch11.fit)
gcoef <- coef(garch11.fit)
gcoef[1]
ext_reg <- CORN.xts # creates a new xts object to hold external regressors
# The code below removes all the columns which are not external regressors.
# There must be a better way to do this
#ext_reg$Date <- NULL
ext_reg$CORN_MID <- NULL
ext_reg$`F1(.35)` <- NULL
ext_reg$`F2(.3)` <- NULL
ext_reg$`F3(.35)` <- NULL
ext_reg$CORN_NAV <- NULL
ext_reg$ROLL <- NULL
ext_reg$`C Jan` <- NULL
ext_reg$`C 2012` <- NULL
ext_reg$etf_asset_error<- NULL
ext_reg$per_NAV_return <- NULL
ext_reg$per_ETF_return <- NULL
ext_reg$asset_basket <- NULL
ext_reg$Volume <- NULL
# Define the model
model_spec <- ugarchspec(variance.model = list(garchOrder = c(1,1),
external.regressors = ext_reg),
mean.model = list(armaOrder = c(0,0))))
# Define the model
model_spec <- ugarchspec(variance.model = list(garchOrder = c(1,1),
external.regressors = ext_reg),
mean.model = list(armaOrder = c(0,0)))
setbounds(model_spec) <- list(vxreg1 = c(-100,100), vxreg2 = c(-100,100), vxreg3 = c(-100,100), vxreg4 = c(-100,100),
vxreg5 = c(-100,100), vxreg6 = c(-100,100), vxreg7 = c(-100,100), vxreg8 = c(-100,100),
vxreg9 = c(-100,100), vxreg10 = c(-100,100), vxreg11 = c(-100,100), vxreg12 = c(-100,100),
vxreg13 = c(-100,100), vxreg14 = c(-100,100), vxreg15 = c(-100,100), vxreg16 = c(-100,100),
vxreg17 = c(-100,100), vxreg18 = c(-100,100), vxreg19 = c(-100,100), vxreg20 = c(-100,100),
vxreg21 = c(-100,100), vxreg22 = c(-100,100), vxreg23 = c(-100,100), vxreg24 = c(-100,100),
vxreg25 = c(-100,100), vxreg26 = c(-100,100), vxreg28 = c(-100,100), vxreg29 = c(-100,100),
vxreg30 = c(-100,100))
# Fit the model and display results
fit <- ugarchfit(data = CORN.xts$etf_asset_error, spec = model_spec)
fit
# Define the model
model_spec <- ugarchspec(variance.model = list(garchOrder = c(3,0),
external.regressors = ext_reg),
mean.model = list(armaOrder = c(0,0)))
setbounds(model_spec) <- list(vxreg1 = c(-100,100), vxreg2 = c(-100,100), vxreg3 = c(-100,100), vxreg4 = c(-100,100),
vxreg5 = c(-100,100), vxreg6 = c(-100,100), vxreg7 = c(-100,100), vxreg8 = c(-100,100),
vxreg9 = c(-100,100), vxreg10 = c(-100,100), vxreg11 = c(-100,100), vxreg12 = c(-100,100),
vxreg13 = c(-100,100), vxreg14 = c(-100,100), vxreg15 = c(-100,100), vxreg16 = c(-100,100),
vxreg17 = c(-100,100), vxreg18 = c(-100,100), vxreg19 = c(-100,100), vxreg20 = c(-100,100),
vxreg21 = c(-100,100), vxreg22 = c(-100,100), vxreg23 = c(-100,100), vxreg24 = c(-100,100),
vxreg25 = c(-100,100), vxreg26 = c(-100,100), vxreg28 = c(-100,100), vxreg29 = c(-100,100),
vxreg30 = c(-100,100))
# Fit the model and display results
fit <- ugarchfit(data = CORN.xts$etf_asset_error, spec = model_spec)
fit
arch3.fit
