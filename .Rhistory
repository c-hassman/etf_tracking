}
data <- "Price"
if(data == "per_asset_return" || data == "per_NAV_return" || data == "per_ETF_return" || data == "TD" || data == "TDa" || data == "TDm"){
print("Return")
}else {
print("Price")
}
data <- "et"
if(data == "per_asset_return" || data == "per_NAV_return" || data == "per_ETF_return" || data == "TD" || data == "TDa" || data == "TDm"){
print("Return")
}else {
print("Price")
}
data <- "per_asset_return"
if(data == "per_asset_return" || data == "per_NAV_return" || data == "per_ETF_return" || data == "TD" || data == "TDa" || data == "TDm"){
print("Return")
}else {
print("Price")
}
### Do Calculations:
calc <- function(data){
print(colnames(data))
# Checks to see if you are looking at price data or not
# if(var == "per_asset_return" ||  == "per_NAV_return" || data == "per_ETF_return" || data == "TD" || data == "TDa" || data == "TDm"){
#   data <- na.omit(data)
# }else {
#   print("Price")
# }
ETF = c(min(data), median(data), mean(data), max(data), sd(data), length(data))
}
data <- "per_asset_return"
if(data == "per_asset_return" || data == "per_NAV_return" || data == "per_ETF_return" || data == "TD" || data == "TDa" || data == "TDm"){
print("Return")
}else {
print("Price")
}
### Table make
# Tried to make this a bit more functionalized but hit some road blocks... works
# even if it isnt pretty
table_make_ex <- function(var){
values <- c("Min", "Median", "Mean", "Max", "STD DEV", "N")
data_table <- data.frame(values, calc(CORN_ex[, var]), calc(SOYB_ex[,var]),
calc(WEAT_ex[,var]), calc(USO_ex[,var]),
calc(UGA_ex[,var]))
colnames(data_table) <- c("Value", "CORN", "SOYB", "WEAT", "USO", "UGA")
return(data_table)
}
table_make_in <- function(var){
values <- c("Min", "Median", "Mean", "Max", "STD DEV", "N")
data_table <- data.frame(values, calc(CORN_in[, var]), calc(SOYB_in[,var]),
calc(WEAT_in[,var]), calc(USO_in[,var]),
calc(UGA_in[,var]))
colnames(data_table) <- c("Value", "CORN", "SOYB", "WEAT", "USO", "UGA")
return(data_table)
}
Price_in <- table_make_in("Price")
View(Price_in)
### Do Calculations:
calc <- function(data, var){
print(colnames(data))
# Checks to see if you are looking at price data or not
if(var == "per_asset_return" || var == "per_NAV_return" || var == "per_ETF_return" || var == "TD" || var == "TDa" || var == "TDm"){
data <- na.omit(data)
}
ETF = c(min(data), median(data), mean(data), max(data), sd(data), length(data))
}
data <- "per_asset_return"
if(data == "per_asset_return" || data == "per_NAV_return" || data == "per_ETF_return" || data == "TD" || data == "TDa" || data == "TDm"){
print("Return")
}else {
print("Price")
}
### Table make
# Tried to make this a bit more functionalized but hit some road blocks... works
# even if it isnt pretty
table_make_ex <- function(var){
values <- c("Min", "Median", "Mean", "Max", "STD DEV", "N")
data_table <- data.frame(values, calc(CORN_ex[, var], var), calc(SOYB_ex[,var], var),
calc(WEAT_ex[,var], var), calc(USO_ex[,var], var),
calc(UGA_ex[,var], var))
colnames(data_table) <- c("Value", "CORN", "SOYB", "WEAT", "USO", "UGA")
return(data_table)
}
table_make_in <- function(var){
values <- c("Min", "Median", "Mean", "Max", "STD DEV", "N")
data_table <- data.frame(values, calc(CORN_in[, var], var), calc(SOYB_in[,var], var),
calc(WEAT_in[,var], var), calc(USO_in[,var],var),
calc(UGA_in[,var], var))
colnames(data_table) <- c("Value", "CORN", "SOYB", "WEAT", "USO", "UGA")
return(data_table)
}
Price_in <- table_make_in("Price")
NAV_in <- table_make_in("NAV")
### Do Calculations:
calc <- function(data, var){
# Checks to see if you are looking at price data or not
if(var == "per_asset_return" || var == "per_NAV_return" || var == "per_ETF_return" || var == "TD" || var == "TDa" || var == "TDm"){
data <- na.omit(data)
}
ETF = c(min(data), median(data), mean(data), max(data), sd(data), length(data))
}
data <- "per_asset_return"
if(data == "per_asset_return" || data == "per_NAV_return" || data == "per_ETF_return" || data == "TD" || data == "TDa" || data == "TDm"){
print("Return")
}else {
print("Price")
}
### Table make
# Tried to make this a bit more functionalized but hit some road blocks... works
# even if it isnt pretty
table_make_ex <- function(var){
values <- c("Min", "Median", "Mean", "Max", "STD DEV", "N")
data_table <- data.frame(values, calc(CORN_ex[, var], var), calc(SOYB_ex[,var], var),
calc(WEAT_ex[,var], var), calc(USO_ex[,var], var),
calc(UGA_ex[,var], var))
colnames(data_table) <- c("Value", "CORN", "SOYB", "WEAT", "USO", "UGA")
return(data_table)
}
table_make_in <- function(var){
values <- c("Min", "Median", "Mean", "Max", "STD DEV", "N")
data_table <- data.frame(values, calc(CORN_in[, var], var), calc(SOYB_in[,var], var),
calc(WEAT_in[,var], var), calc(USO_in[,var],var),
calc(UGA_in[,var], var))
colnames(data_table) <- c("Value", "CORN", "SOYB", "WEAT", "USO", "UGA")
return(data_table)
}
Price_in <- table_make_in("Price")
NAV_in <- table_make_in("NAV")
NAV_r_in <- table_make_in("per_NAV_return")
ETF_r_in <- table_make_in("per_ETF_return")
View(ETF_r_in)
###############################################################################
#### Summary stats ############################################################
###############################################################################
# Colburn Hassman
# colburn7@vt.edu
# January 15, 2021
library("stats")
source("~/Documents/etf_tracking/Analysis/preprocessing.R")
CORN_ex <- data_pull_ex("CORN")
SOYB_ex <- data_pull_ex("SOYB")
WEAT_ex <- data_pull_ex("WEAT")
USO_ex <- data_pull_ex("USO")
UGA_ex <- data_pull_ex("UGA")
CORN_in <- data_pull_in("CORN")
SOYB_in <- data_pull_in("SOYB")
WEAT_in <- data_pull_in("WEAT")
USO_in <- data_pull_in("USO")
UGA_in <- data_pull_in("UGA")
#############################
## Define Functions
#############################
### Do Calculations:
calc <- function(data, var){
# Checks to see if you are looking at return based data: if so, omit na row
if(var == "per_asset_return" || var == "per_NAV_return" || var == "per_ETF_return" || var == "TD" || var == "TDa" || var == "TDm"){
data <- na.omit(data)
}
# do calculations
ETF = c(min(data), median(data), mean(data), max(data), sd(data), length(data))
return(ETF)
}
### Table make
# Tried to make this a bit more functionalized but hit some road blocks... works
# even if it isnt pretty
table_make_ex <- function(var){
values <- c("Min", "Median", "Mean", "Max", "STD DEV", "N")
data_table <- data.frame(values, calc(CORN_ex[, var], var), calc(SOYB_ex[,var], var),
calc(WEAT_ex[,var], var), calc(USO_ex[,var], var),
calc(UGA_ex[,var], var))
colnames(data_table) <- c("Value", "CORN", "SOYB", "WEAT", "USO", "UGA")
return(data_table)
}
table_make_in <- function(var){
values <- c("Min", "Median", "Mean", "Max", "STD DEV", "N")
data_table <- data.frame(values, calc(CORN_in[, var], var), calc(SOYB_in[,var], var),
calc(WEAT_in[,var], var), calc(USO_in[,var],var),
calc(UGA_in[,var], var))
colnames(data_table) <- c("Value", "CORN", "SOYB", "WEAT", "USO", "UGA")
return(data_table)
}
#############################
### Create Tables
#############################
# In the paper, the tables with the most values will be used (default is in).
# but in the case of TDm, TD, Asset, etc, ex is used
Price_in <- table_make_in("Price")
NAV_in <- table_make_in("NAV")
NAV_r_in <- table_make_in("per_NAV_return")
ETF_r_in <- table_make_in("per_ETF_return")
TD_ex <- table_make_ex("TD")
TDa_in <- table_make_in("TDa")
TDm_ex <- table_make_ex("TDm")
# Clean up my removing all non-table elements
rm(CORN_ex, CORN_in, SOYB_ex, SOYB_in, WEAT_ex, WEAT_in, USO_ex, USO_in,
UGA_ex, UGA_in)
View(ETF_r_in)
# GRAPH SQUARED RETURNS
###############################################################################
##### ARCH Analysis ###########################################################
###############################################################################
# Colburn Hassman
# colburn7@vt.edu
# January 18, 2021
# PURPOSE: Motivate the GARCH Analysis
# IMPORT PACKAGES
# IMPORT DATA
source("~/Documents/etf_tracking/Analysis/preprocessing.R")
CORN_in <- data_pull_in("CORN")
SOYB_in <- data_pull_in("SOYB")
WEAT_in <- data_pull_in("WEAT")
USO_in <- data_pull_in("USO")
UGA_in <- data_pull_in("UGA")
# GRAPH SQUARED RETURNS
# ACF GRAPH: RESIDUALS
# ACF GRAPH: SQUARED RESIDUALS
# LJUNG-BOX TEST: SQUARED RETURNS
# MINCER ZARNOWITZ
corn_MZ <- lm(CORN_in$Price ~ CORN_in$NAV)
# MINCER ZARNOWITZ
corn_MZ <- lm(CORN_in$Price ~ CORN_in$NAV)
CORN_in$Ea <- corn_MZ$residuals # assign residuals to arbitrage episilon
View(CORN_in)
# MINCER ZARNOWITZ
corn_MZ <- lm(CORN_in$per_ETF_return ~ CORN_in$per_NAV_return)
CORN_in$Ea <- corn_MZ$residuals # assign residuals to arbitrage episilon
View(CORN_in)
MZ_fun <- function(data){
mod <- lm(data$per_ETF_return ~ data$per_NAV_return)
data$Ea <- mod$residuals
}
mz_fun <- function(data){
mod <- lm(data$per_ETF_return ~ data$per_NAV_return)
data$Ea <- mod$residuals
}
mz_fun(SOYB_in)
# MINCER ZARNOWITZ
corn_MZ <- lm(CORN_in$per_ETF_return ~ CORN_in$per_NAV_return)
CORN_in$Ea <- corn_MZ$residuals # assign residuals to arbitrage episilon
mz_fun <- function(data){
data <- na.omit(data)
mod <- lm(data$per_ETF_return ~ data$per_NAV_return)
data$Ea <- mod$residuals
}
mz_fun(SOYB_in)
View(SOYB_in)
mz_fun <- function(data){
data <- na.omit(data)
mod <- lm(data$per_ETF_return ~ data$per_NAV_return)
data$Ea <- mod$residuals
}
mz_fun(SOYB_in)
mz_fun <- function(data){
data <- na.omit(data)
mod <- lm(data$per_ETF_return ~ data$per_NAV_return)
data$Ea <- mod$residuals
return(data)
}
mz_fun(SOYB_in)
SOYB_in <- mz_fun(SOYB_in)
View(SOYB_in)
# IMPORT PACKAGES
# IMPORT DATA
source("~/Documents/etf_tracking/Analysis/preprocessing.R")
CORN_in <- data_pull_in("CORN")
SOYB_in <- data_pull_in("SOYB")
WEAT_in <- data_pull_in("WEAT")
USO_in <- data_pull_in("USO")
UGA_in <- data_pull_in("UGA")
# MINCER ZARNOWITZ
mz_fun <- function(data){
data <- na.omit(data) # Omits NAs created by return
mod <- lm(data$per_ETF_return ~ data$per_NAV_return) #runs linear model
data$Ea <- mod$residuals # assign residuals to arbitrage episilon
return(data)
}
CORN_in <- mx_fun(CORN_in)
SOYB_in <- mz_fun(SOYB_in)
WEAT_in <- mz_fun(WEAT_in)
USO_in <- mz_fun(USO_in)
UGA_in <- mz_fun(UGA_in)
# GRAPH SQUARED RETURNS
#pdf(paste0(path,"/Figures/Squared_Tracking_Error.pdf"),height = 8,
#    width = 10)
par(mfrow = c(3, 2), mai = c(0.25, 0.5, 0.2, 0.05))
plot(CORN$DATE, CORN$Ea^2, type = "l", main = "CORN",
xlab = "", ylab = "")
plot(SOYB$DATE, SOYB$Ea^2, type = "l", main = "SOYB",
xlab = "", ylab = "")
plot(WEAT$DATE, WEAT$Ea^2, type = "l", main = "WEAT",
xlab = "", ylab = "Percent Error Squared")
plot(USO$DATE, USO$Ea^2, type = "l", main = "USO",
xlab = "", ylab = "")
plot(UGA$DATE, UGA$Ea^2, type = "l", main = "UGA",
xlab = "", ylab = "")
# GRAPH SQUARED RETURNS
#pdf(paste0(path,"/Figures/Squared_Tracking_Error.pdf"),height = 8,
#    width = 10)
par(mfrow = c(3, 2), mai = c(0.25, 0.5, 0.2, 0.05))
plot(CORN_in$DATE, CORN_in$Ea^2, type = "l", main = "CORN",
xlab = "", ylab = "")
plot(SOYB_in$DATE, SOYB_in$Ea^2, type = "l", main = "SOYB",
xlab = "", ylab = "")
# GRAPH SQUARED RETURNS
#pdf(paste0(path,"/Figures/Squared_Tracking_Error.pdf"),height = 8,
#    width = 10)
par(mfrow = c(3, 2), mai = c(0.25, 0.5, 0.2, 0.05))
plot(CORN_in$Date, CORN_in$Ea^2, type = "l", main = "CORN",
xlab = "", ylab = "")
plot(SOYB_in$Date, SOYB_in$Ea^2, type = "l", main = "SOYB",
xlab = "", ylab = "")
plot(WEAT_in$Date, WEAT_in$Ea^2, type = "l", main = "WEAT",
xlab = "", ylab = "Percent Error Squared")
plot(USO_in$Date, USO_in$Ea^2, type = "l", main = "USO",
xlab = "", ylab = "")
plot(UGA_in$Date, UGA_in$Ea^2, type = "l", main = "UGA",
xlab = "", ylab = "")
dev.off()
# GRAPH SQUARED RETURNS
#pdf(paste0(path,"/Figures/Squared_Tracking_Error.pdf"),height = 8,
#    width = 10)
par(mfrow = c(3, 2), mai = c(0.25, 0.5, 0.2, 0.05))
plot(CORN_in$Date, CORN_in$Ea^2, type = "l", main = "CORN",
xlab = "", ylab = "")
plot(SOYB_in$Date, SOYB_in$Ea^2, type = "l", main = "SOYB",
xlab = "", ylab = "")
plot(WEAT_in$Date, WEAT_in$Ea^2, type = "l", main = "WEAT",
xlab = "", ylab = "Percent Error Squared")
plot(USO_in$Date, USO_in$Ea^2, type = "l", main = "USO",
xlab = "", ylab = "")
plot(CORN_in$Date, CORN_in$Ea^2, type = "l", main = "CORN",
xlab = "", ylab = "")
View(CORN_in)
CORN_in <- mx_fun(CORN_in)
CORN_in <- mz_fun(CORN_in)
plot(CORN_in$Date, CORN_in$Ea^2, type = "l", main = "CORN",
xlab = "", ylab = "")
# GRAPH SQUARED RETURNS
#pdf(paste0(path,"/Figures/Squared_Tracking_Error.pdf"),height = 8,
#    width = 10)
par(mfrow = c(3, 2), mai = c(0.25, 0.5, 0.2, 0.05))
plot(CORN_in$Date, CORN_in$Ea^2, type = "l", main = "CORN",
xlab = "", ylab = "")
plot(SOYB_in$Date, SOYB_in$Ea^2, type = "l", main = "SOYB",
xlab = "", ylab = "")
plot(WEAT_in$Date, WEAT_in$Ea^2, type = "l", main = "WEAT",
xlab = "", ylab = "Percent Error Squared")
plot(USO_in$Date, USO_in$Ea^2, type = "l", main = "USO",
xlab = "", ylab = "")
plot(UGA_in$Date, UGA_in$Ea^2, type = "l", main = "UGA",
xlab = "", ylab = "")
dev.off()
# GRAPH SQUARED RETURNS
#pdf(paste0(path,"/Figures/Squared_Tracking_Error.pdf"),height = 8,
#    width = 10)
par(mfrow = c(3, 2), mai = c(0.25, 0.5, 0.2, 0.05))
plot(CORN_in$Date, CORN_in$Ea^2, type = "l", main = "CORN",
xlab = "", ylab = "")
plot(SOYB_in$Date, SOYB_in$Ea^2, type = "l", main = "SOYB",
xlab = "", ylab = "")
plot(WEAT_in$Date, WEAT_in$Ea^2, type = "l", main = "WEAT",
xlab = "", ylab = "Percent Error Squared")
plot(USO_in$Date, USO_in$Ea^2, type = "l", main = "USO",
xlab = "", ylab = "")
plot(UGA_in$Date, UGA_in$Ea^2, type = "l", main = "UGA",
xlab = "", ylab = "")
# ACF GRAPH: RESIDUALS
forecast::Acf(CORN_in$Ea)
# ACF GRAPH: RESIDUALS
forecast::Acf(CORN_in$Ea, title(main= "CORN"))
# ACF GRAPH: RESIDUALS
forecast::Acf(CORN_in$Ea, main= "CORN")
par(mfrow = c(3, 2), mai = c(0.25, 0.5, 0.2, 0.05))
plot(corn_acf, main = "CORN")
plot(soyb_acf, main = "SOYB")
plot(weat_acf, main = "WEAT")
plot(uso_acf, main = "USO")
# ACF GRAPH: RESIDUALS
corn_acf <- forecast::Acf(CORN_in$Ea, plot = FALSE)
soyb_acf <- forecast::Acf(CORN_in$Ea, plot = FALSE)
weat_acf <- forecast::Acf(CORN_in$Ea, plot = FALSE)
uso_acf <- forecast::Acf(CORN_in$Ea, plot = FALSE)
uga_acf <- forecast::Acf(CORN_in$Ea, plot = FALSE)
par(mfrow = c(3, 2), mai = c(0.25, 0.5, 0.2, 0.05))
plot(corn_acf, main = "CORN")
plot(soyb_acf, main = "SOYB")
plot(weat_acf, main = "WEAT")
plot(uso_acf, main = "USO")
plot(uga_acf, main = "UGA")
par(mfrow = c(3, 2)) #, mai = c(0.25, 0.5, 0.2, 0.05))
plot(corn_acf, main = "CORN")
plot(soyb_acf, main = "SOYB")
plot(weat_acf, main = "WEAT")
plot(uso_acf, main = "USO")
dev.off()
par(mfrow = c(3, 2)) #, mai = c(0.25, 0.5, 0.2, 0.05))
plot(corn_acf, main = "CORN")
plot(soyb_acf, main = "SOYB")
plot(weat_acf, main = "WEAT")
plot(uso_acf, main = "USO")
plot(uga_acf, main = "UGA")
par(mfrow = c(3, 2)) #, mai = c(0.25, 0.5, 0.2, 0.05))  # come back and change format
plot(corn2_acf, main = "CORN")
plot(soyb2_acf, main = "SOYB")
plot(weat2_acf, main = "WEAT")
plot(uso2_acf, main = "USO")
plot(uga2_acf, main = "UGA")
# ACF GRAPH: SQUARED RESIDUALS
corn2_acf <- forecast::Acf(CORN_in$Ea^2, plot = FALSE)
soyb2_acf <- forecast::Acf(CORN_in$Ea^2, plot = FALSE)
weat2_acf <- forecast::Acf(CORN_in$Ea^2, plot = FALSE)
uso2_acf <- forecast::Acf(CORN_in$Ea^2, plot = FALSE)
uga2_acf <- forecast::Acf(CORN_in$Ea^2, plot = FALSE)
par(mfrow = c(3, 2)) #, mai = c(0.25, 0.5, 0.2, 0.05))  # come back and change format
plot(corn2_acf, main = "CORN")
plot(soyb2_acf, main = "SOYB")
plot(weat2_acf, main = "WEAT")
plot(uso2_acf, main = "USO")
plot(uga2_acf, main = "UGA")
# ACF GRAPH: RESIDUALS
corn_acf <- forecast::Acf(CORN_in$Ea, plot = FALSE)
soyb_acf <- forecast::Acf(SOYB_in$Ea, plot = FALSE)
weat_acf <- forecast::Acf(WEAT_in$Ea, plot = FALSE)
uso_acf <- forecast::Acf(USO_in$Ea, plot = FALSE)
uga_acf <- forecast::Acf(UGA_in$Ea, plot = FALSE)
par(mfrow = c(3, 2)) #, mai = c(0.25, 0.5, 0.2, 0.05))  # come back and change format
plot(corn_acf, main = "CORN")
plot(soyb_acf, main = "SOYB")
plot(weat_acf, main = "WEAT")
plot(uso_acf, main = "USO")
plot(uga_acf, main = "UGA")
dev.off()
# DICKEY-FULLER: RESIDUALS
tseries::adf.test(CORN)
# DICKEY-FULLER: RESIDUALS
tseries::adf.test(CORN_in$Ea)
# DICKEY-FULLER: RESIDUALS
tseries::adf.test(CORN_in$Ea)
tseries::adf.test(SOYB_in$Ea)
tseries::adf.test(WEAT_in$Ea)
tseries::adf.test(USO_in$Ea)
tseries::adf.test(UGA_in$Ea)
stats::Box.test(CORN_in$Ea, type = "Ljung-Box", lag = 12)
stats::Box.test(CORN_in$Ea^2, type = "Ljung-Box", lag = 12)
stats::Box.test(CORN_in$Ea^2, type = "Ljung-Box", lag = 12)
stats::Box.test(SOYB_in$Ea^2, type = "Ljung-Box", lag = 12)
stats::Box.test(WEAT_in$Ea^2, type = "Ljung-Box", lag = 12)
stats::Box.test(USO_in$Ea^2, type = "Ljung-Box", lag = 12)
stats::Box.test(UGA_in$Ea^2, type = "Ljung-Box", lag = 12)
# ACF GRAPH: SQUARED RESIDUALS
corn2_acf <- forecast::Acf(CORN_in$Ea^2, plot = FALSE)
soyb2_acf <- forecast::Acf(SOYB_in$Ea^2, plot = FALSE)
weat2_acf <- forecast::Acf(WEAT_in$Ea^2, plot = FALSE)
uso2_acf <- forecast::Acf(USO_in$Ea^2, plot = FALSE)
uga2_acf <- forecast::Acf(UGA_in$Ea^2, plot = FALSE)
par(mfrow = c(3, 2)) #, mai = c(0.25, 0.5, 0.2, 0.05))  # come back and change format
plot(corn2_acf, main = "CORN")
plot(soyb2_acf, main = "SOYB")
plot(weat2_acf, main = "WEAT")
plot(uso2_acf, main = "USO")
plot(uga2_acf, main = "UGA")
dev.off()
# DICKEY-FULLER: RESIDUALS
# In every case, we reject the null hypothesis and assume stationarity
tseries::adf.test(CORN_in$Ea)
tseries::adf.test(SOYB_in$Ea)
tseries::adf.test(WEAT_in$Ea)
tseries::adf.test(USO_in$Ea)
tseries::adf.test(UGA_in$Ea)
# ACF GRAPH: RESIDUALS
corn_acf <- forecast::Acf(CORN_in$Ea, plot = FALSE)
soyb_acf <- forecast::Acf(SOYB_in$Ea, plot = FALSE)
weat_acf <- forecast::Acf(WEAT_in$Ea, plot = FALSE)
uso_acf <- forecast::Acf(USO_in$Ea, plot = FALSE)
uga_acf <- forecast::Acf(UGA_in$Ea, plot = FALSE)
par(mfrow = c(3, 2)) #, mai = c(0.25, 0.5, 0.2, 0.05))  # come back and change format
plot(corn_acf, main = "CORN")
plot(soyb_acf, main = "SOYB")
plot(weat_acf, main = "WEAT")
plot(uso_acf, main = "USO")
plot(uga_acf, main = "UGA")
dev.off()
# ACF GRAPH: SQUARED RESIDUALS
corn2_acf <- forecast::Acf(CORN_in$Ea^2, plot = FALSE)
soyb2_acf <- forecast::Acf(SOYB_in$Ea^2, plot = FALSE)
weat2_acf <- forecast::Acf(WEAT_in$Ea^2, plot = FALSE)
uso2_acf <- forecast::Acf(USO_in$Ea^2, plot = FALSE)
uga2_acf <- forecast::Acf(UGA_in$Ea^2, plot = FALSE)
par(mfrow = c(3, 2)) #, mai = c(0.25, 0.5, 0.2, 0.05))  # come back and change format
plot(corn2_acf, main = "CORN")
plot(soyb2_acf, main = "SOYB")
plot(weat2_acf, main = "WEAT")
plot(uso2_acf, main = "USO")
plot(uga2_acf, main = "UGA")
dev.off()
# LJUNG-BOX TEST: SQUARED RETURNS
stats::Box.test(CORN_in$Ea^2, type = "Ljung-Box", lag = 10)
stats::Box.test(SOYB_in$Ea^2, type = "Ljung-Box", lag = 10)
stats::Box.test(WEAT_in$Ea^2, type = "Ljung-Box", lag = 10)
stats::Box.test(USO_in$Ea^2, type = "Ljung-Box", lag = 10)
stats::Box.test(UGA_in$Ea^2, type = "Ljung-Box", lag = 10)
plot(corn2_acf, main = "CORN")
plot(soyb2_acf, main = "SOYB")
plot(weat2_acf, main = "WEAT")
plot(uso2_acf, main = "USO")
plot(corn2_acf, main = "CORN")
plot(soyb2_acf, main = "SOYB")
plot(weat2_acf, main = "WEAT")
plot(uso2_acf, main = "USO")
plot(uga2_acf, main = "UGA")
plot(uso2_acf, main = "USO")
plot(uga2_acf, main = "UGA")
