qplot(SOYB$DATE, ((SOYB$SOYB_MID - SOYB$SOYB_NAV)/SOYB$SOYB_NAV * 100), geom = 'line') +
theme_bw() + ylab("Premium/Discount (%)") + xlab("Date") + ggtitle("SOYB Premium/Discount to NAV")
#-------------------OLS-----------------------------------------------#
#--------Simple
simple <- lm(per_asset_return ~ per_ETF_return, data = SOYB)
summary(simple)
#--------Dummy
model <- lm(abs(SOYB$etf_asset_error) ~ abs(SOYB$per_ETF_return) + SOYB$`S WASDE` + SOYB$`S WASDE + CP` +
SOYB$`S Grain Stocks` + SOYB$`S Prospective Plantings` + SOYB$`S Acreage Report` +
SOYB$`S Cattle on Feed` + SOYB$`S Hogs & Pigs` + SOYB$`S Day Before Roll` + SOYB$`S Day After Roll` +
SOYB$`C Feb` + SOYB$`C Mar` + SOYB$`C April` + SOYB$`C May` + SOYB$`C June` + SOYB$`C July` +
SOYB$`C Aug` + SOYB$`C Sept` + SOYB$`C Nov` + SOYB$`C Dec` + SOYB$`C 2013` + SOYB$`C 2014` +
SOYB$`C 2015` + SOYB$`C 2016` + SOYB$`C 2017` + SOYB$`C 2018` + SOYB$`C 2019` + SOYB$`C 2020`)
summary(model)
#---------------------GARCH----------------------------------------------#
err_garch = tseries::garch(x = SOYB$etf_asset_error, order = c(1,1))
summary(err_garch)
#--GARCH Volatility Graph
# This graphs the Volatility from the GARCH model versus the market returns
vol = err_garch$fitted.values # assign the fitted values to a variable
vol = data.frame(vol) # convert to a dataframe
vol$Volatility = vol$sigt # Create a new column of sigt squared
vol$Date = SOYB$DATE # Assign the date column from corn to vol
vol$'Asset Return^2' = SOYB$per_asset_return^2 # add the per asset returns
# Convert the data to a long format
vol_long <- vol %>%
select(Date, Volatility, 'Asset Return^2') %>%
gather(key = 'variable', value = 'value', -Date)
# Make Graph
ggplot(vol_long, aes(x = Date, y = value)) +
geom_line(aes(color = variable)) +
scale_color_manual(values = c("darkred", "steelblue")) +
facet_grid(rows = vars(variable), scales = "free") +
theme_bw() + theme(legend.position = "none") +
ylab("Percent (%)") + ggtitle("SOYB Asset Basket Return and Error Volatility Plot")
rm(list = ls())
library(readxl)
library(tidyverse)
#-----------------Import Data from Excel and order------------#
UGA <- read_excel("G:/My Drive/3_Massa Research/Neff Paper/Working_Folder/Data_Update.xlsx",
sheet = "UGA", col_types = c("date",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric"))
UGA <- UGA[order(UGA$DATE),]
#-----------------------Calculate Returns and Errors--------------#
UGA$per_asset_return <- log(UGA$Futures/lag(UGA$Futures))
UGA$per_ETF_return <- log(UGA$UGA_MID/lag(UGA$UGA_MID))
UGA$per_NAV_return <- log(UGA$UGA_NAV/lag(UGA$UGA_NAV))
UGA$etf_asset_error <- UGA$per_ETF_return - UGA$per_asset_return
UGA <- na.omit(UGA)
#----------------------Exploratory Plot--------------------------#
#------ETF, Asset Basket Error
qplot(UGA$DATE, (UGA$etf_asset_error * 100), geom = 'line') + theme_bw() +
ggtitle("Daily Return Error: UGA ETF - Asset Basket") + ylab("Error (%)") +
xlab("Date")
#-----ETF and Asset Basket
etfcolor <- "black"
assetcolor <- "darkgrey"
coeff <- UGA$Futures[1] / UGA$UGA_MID[1]
ggplot(data = UGA, aes(x = DATE)) +
geom_line(aes(y = UGA_MID), color = etfcolor) +
geom_line(aes(y = Futures / coeff), color = assetcolor) +
scale_y_continuous(
name = 'ETF Price ($)',
sec.axis = sec_axis(~.*coeff, name = "Asset Basket Price (Dollars per Gallon)")
) + theme_bw() + ggtitle("UGA ETF and Asset Basket Price") + xlab("Date")
#----Premium/Discount to NAV
qplot(UGA$DATE, ((UGA$UGA_MID - UGA$UGA_NAV)/UGA$UGA_NAV * 100), geom = 'line') +
theme_bw() + ylab("Premium/Discount (%)") + xlab("Date") + ggtitle("UGA Premium/Discount to NAV")
#-------------------OLS-----------------------------------------------#
#--------Simple
simple <- lm(per_asset_return ~ per_ETF_return, data = UGA)
summary(simple)
#--------Dummy
model <- lm(abs(UGA$etf_asset_error) ~ abs(UGA$per_ETF_return) + UGA$`RB Day Before Roll` + UGA$`RB Day After Roll` +
UGA$`RB Feb` + UGA$`RB Mar` + UGA$`RB April` + UGA$`RB May` + UGA$`RB June` + UGA$`RB July` +
UGA$`RB Aug` + UGA$`RB Sept` + UGA$`RB Oct` + UGA$`RB Nov` + UGA$`RB Dec` + UGA$`RB 2013` +
UGA$`RB 2014` + UGA$`RB 2015` + UGA$`RB 2016` + UGA$`RB 2017` + UGA$`RB 2018` + UGA$`RB 2019` +
UGA$`RB 2020` + UGA$`RB STEO` + UGA$`RB Drilling Prod` + UGA$`RB Petro Supply/Prod` + UGA$`RB Annual Energy Outlook`)
summary(model)
#---------------------GARCH----------------------------------------------#
err_garch = tseries::garch(x = UGA$etf_asset_error, order = c(1,1))
summary(err_garch)
#--GARCH Volatility Graph
# This graphs the Volatility from the GARCH model versus the market returns
vol = err_garch$fitted.values # assign the fitted values to a variable
vol = data.frame(vol) # convert to a dataframe
vol$Volatility = vol$sigt # Create a new column of sigt squared
vol$Date = UGA$DATE # Assign the date column from corn to vol
vol$'Asset Return^2' = UGA$per_asset_return # add the per asset returns
# Convert the data to a long format
vol_long <- vol %>%
select(Date, Volatility, 'Asset Return^2') %>%
gather(key = 'variable', value = 'value', -Date)
# Make Graph
ggplot(vol_long, aes(x = Date, y = value)) +
geom_line(aes(color = variable)) +
scale_color_manual(values = c("darkred", "steelblue")) +
facet_grid(rows = vars(variable), scales = "free") +
theme_bw() + theme(legend.position = "none") +
ylab("Percent (%)") + ggtitle("UGA Futures Return and Error Volatility Plot")
#--GARCH Volatility Graph
# This graphs the Volatility from the GARCH model versus the market returns
vol = err_garch$fitted.values # assign the fitted values to a variable
vol = data.frame(vol) # convert to a dataframe
vol$Volatility = vol$sigt # Create a new column of sigt squared
vol$Date = UGA$DATE # Assign the date column from corn to vol
vol$'Asset Return^2' = UGA$per_asset_return ^2 # add the per asset returns
# Convert the data to a long format
vol_long <- vol %>%
select(Date, Volatility, 'Asset Return^2') %>%
gather(key = 'variable', value = 'value', -Date)
# Make Graph
ggplot(vol_long, aes(x = Date, y = value)) +
geom_line(aes(color = variable)) +
scale_color_manual(values = c("darkred", "steelblue")) +
facet_grid(rows = vars(variable), scales = "free") +
theme_bw() + theme(legend.position = "none") +
ylab("Percent (%)") + ggtitle("UGA Futures Return and Error Volatility Plot")
rm(list=ls())
library(readxl)
library(tidyverse)
library(ggthemes)
#------------------------Load in Data from Excel------------------------------#
USO <- read_excel("G:/My Drive/3_Massa Research/Neff Paper/Working_Folder/Data_Update.xlsx",
sheet = "USO", col_types = c("date",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric"))
USO <- USO[order(USO$DATE),]
#--------------------Calculate Returns and Errors ---------------------------#
USO$per_asset_return <- log(USO$Futures/lag(USO$Futures))
USO$per_ETF_return <- log(USO$USO_MID /lag(USO$USO_MID))
USO$per_NAV_return <- log(USO$USO_NAV/lag(USO$USO_NAV))
USO$etf_asset_error <- USO$per_ETF_return - USO$per_asset_return
USO <- na.omit(USO)
#---------------------Exploratory Plots--------------------------------------#
#------ETF, Asset Basket Error
qplot(USO$DATE, (USO$etf_asset_error * 100), geom = 'line') + theme_bw() +
ggtitle("Daily Return Error: USO ETF - Asset Basket") + ylab("Error (%)") +
xlab("Date")
#-----ETF and Asset Basket
etfcolor <- "black"
assetcolor <- "darkgrey"
coeff <- USO$Futures[1]/USO$USO_MID[1]
ggplot(data = USO, aes(x = DATE)) +
geom_line(aes(y = USO_MID), color = etfcolor) +
geom_line(aes(y = Futures / coeff), color = assetcolor) +
scale_y_continuous(
name = 'ETF Price ($)',
sec.axis = sec_axis(~.*coeff, name = "Asset Basket ($ per Barrel")
) + theme_bw() + ggtitle("USO ETF and Asset Basket Price") + xlab("Date")
#----Premium/Discount to NAV
qplot(USO$DATE, ((USO$USO_MID - USO$USO_NAV)/USO$USO_NAV * 100), geom = 'line') +
theme_bw() + ylab("Premium/Discount (%)") + xlab("Date") + ggtitle("USO Premium/Discount to NAV")
#-------------------OLS-----------------------------------------------#
#--------Simple
simple <- lm(per_asset_return ~ per_ETF_return, data = USO)
summary(simple)
#--------Dummy
model <- lm(abs(USO$etf_asset_error) ~ abs(USO$per_ETF_return) + USO$`CL Day Before Roll` +
USO$`CL Day After Roll` + USO$`CL Feb` + USO$`CL Mar` + USO$`CL April` + USO$`CL May` +
USO$`CL June` + USO$`CL July` + USO$`CL Aug` + USO$`CL Sept` + USO$`CL Oct` +
USO$`CL Nov` + USO$`CL Dec` + USO$`CL 2014` + USO$`CL 2015` + USO$`CL 2016` +
USO$`CL 2017` + USO$`CL 2018` + USO$`CL 2019` + USO$`CL 2020` + USO$`CL STEO` +
USO$`CL Drilling Prod` + USO$`CL Petro Supply/Prod` + USO$`CL Annual Energy Outlook`)
summary(model)
#---------------------GARCH----------------------------------------------#
err_garch = tseries::garch(x = USO$etf_asset_error, order = c(1,1))
summary(err_garch)
#---------------------GARCH----------------------------------------------#
err_garch = tseries::garch(x = USO$etf_asset_error, order = c(1,1))
summary(err_garch)
#--GARCH Volatility Graph
# This graphs the Volatility from the GARCH model versus the market returns
vol = err_garch$fitted.values # assign the fitted values to a variable
vol = data.frame(vol) # convert to a dataframe
vol$Volatility = vol$sigt # Create a new column of sigt squared
vol$Date = USO$DATE # Assign the date column from corn to vol
vol$'Asset Return^2' = USO$per_asset_return ^2 # add the per asset returns
# Convert the data to a long format
vol_long <- vol %>%
select(Date, Volatility, 'Asset Return^2') %>%
gather(key = 'variable', value = 'value', -Date)
# Make Graph
ggplot(vol_long, aes(x = Date, y = value)) +
geom_line(aes(color = variable)) +
scale_color_manual(values = c("darkred", "steelblue")) +
facet_grid(rows = vars(variable), scales = "free") +
theme_bw() + theme(legend.position = "none") +
ylab("Percent (%)") + ggtitle("USO Futures Return and Error Volatility Plot")
rm(list = ls())
library(readxl)
library(tidyverse)
#-----------------Import Data from Excel and order------------#
WEAT <- read_excel("G:/My Drive/3_Massa Research/Neff Paper/Working_Folder/Data_Update.xlsx",
sheet = "WEAT", col_types = c("date",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric"))
WEAT <- WEAT[order(WEAT$DATE),] #order by date
WEAT$asset_basket <- (WEAT$`F1(.35)` * 0.35) + (WEAT$`F2(.3)` * 0.3) + (WEAT$`F3(.35)` * 0.35) #construct asset baskets
#-----------------------Calculate Returns and Errors--------------#
WEAT$per_asset_return <- log(WEAT$asset_basket/lag(WEAT$asset_basket)) #calculate percent asset return
WEAT$per_ETF_return <- log(WEAT$WEAT_MID/lag(WEAT$WEAT_MID)) #calculate percent ETF return
WEAT$per_NAV_return <- log(WEAT$WEAT_NAV/lag(WEAT$WEAT_NAV)) #calculate percent NAV return
WEAT$etf_asset_error <- WEAT$per_ETF_return - WEAT$per_asset_return #calculate percent ETF return
WEAT <- na.omit(WEAT) #Omit Rows with NAs
#---------------------Exploratory Plots--------------------------#
#------ETF, Asset Basket Error
qplot(WEAT$DATE, (WEAT$etf_asset_error * 100), geom = 'line') + theme_bw() +
ggtitle("Daily Return Error: WEAT ETF - Asset Basket") + ylab("Error (%)") +
xlab("Date")
#-----ETF and Asset Basket
etfcolor <- "black"
assetcolor <- "darkgrey"
coeff <- WEAT$asset_basket[1] / WEAT$WEAT_MID[1]
ggplot(data = WEAT, aes(x = DATE)) +
geom_line(aes(y = WEAT_MID), color = etfcolor) +
geom_line(aes(y = asset_basket / coeff), color = assetcolor) +
scale_y_continuous(
name = 'ETF Price ($)',
sec.axis = sec_axis(~.*coeff, name = "Asset Basket Price (cents per bushel)")
) + theme_bw() + ggtitle('WEAT ETF and Asset Basket Price')
#----Premium/Discount to NAV
qplot(WEAT$DATE, ((WEAT$WEAT_MID - WEAT$WEAT_NAV)/WEAT$WEAT_NAV * 100), geom = 'line') +
theme_bw() + ylab("Premium/Discount (%)") + xlab("Date") + ggtitle("WEAT Premium/Discount to NAV")
#-------------------OLS-----------------------------------------------#
#--------Simple
simple <- lm(per_asset_return ~ per_ETF_return, data = WEAT)
summary(simple)
#--------Dummy
model <- lm(abs(WEAT$etf_asset_error) ~ abs(WEAT$per_ETF_return) + WEAT$`W WASDE` + WEAT$`W WASDE + CP` +
WEAT$`W Grain Stocks` + WEAT$`W Prospective Plantings` + WEAT$`W Acreage Report` +
WEAT$`W Cattle on Feed` + WEAT$`W Hogs & Pigs` + WEAT$`W Day Before Roll` + WEAT$`W Day After Roll` +
WEAT$`W Feb` + WEAT$`W Mar` + WEAT$`W April` + WEAT$`W May` + WEAT$`W June` +
WEAT$`W July` + WEAT$`W Aug` + WEAT$`W Sept` + WEAT$`W Oct` + WEAT$`W Nov` + WEAT$`W Dec` +
WEAT$`W 2013` + WEAT$`W 2014` + WEAT$`W 2015` + WEAT$`W 2016` + WEAT$`W 2017` +
WEAT$`W 2018` + WEAT$W2019 + WEAT$W2020)
summary(model)
#---------------------GARCH----------------------------------------------#
err_garch = tseries::garch(x = WEAT$etf_asset_error, order = c(1,1))
summary(err_garch)
#--GARCH Volatility Graph
# This graphs the Volatility from the GARCH model versus the market returns
vol = err_garch$fitted.values # assign the fitted values to a variable
#---------------------GARCH----------------------------------------------#
err_garch = tseries::garch(x = WEAT$etf_asset_error, order = c(1,1))
summary(err_garch)
#--GARCH Volatility Graph
# This graphs the Volatility from the GARCH model versus the market returns
vol = err_garch$fitted.values # assign the fitted values to a variable
vol = data.frame(vol) # convert to a dataframe
vol$Volatility = vol$sigt # Create a new column of sigt squared
vol$Date = WEAT$DATE # Assign the date column from corn to vol
vol$'Asset Return ^2' = WEAT$per_asset_return ^2 # add the per asset returns
# Convert the data to a long format
vol_long <- vol %>%
select(Date, Volatility, 'Asset Return ^2') %>%
gather(key = 'variable', value = 'value', -Date)
# Make Graph
ggplot(vol_long, aes(x = Date, y = value)) +
geom_line(aes(color = variable)) +
scale_color_manual(values = c("darkred", "steelblue")) +
facet_grid(rows = vars(variable), scales = "free") +
theme_bw() + theme(legend.position = "none") +
ylab("Percent (%)") + ggtitle("WEAT Asset Basket Return and Volatility Plot")
rm(list = ls())
library(readxl)
library(tidyverse)
#-----------------Import Data from Excel and order------------#
UGA <- read_excel("G:/My Drive/3_Massa Research/Neff Paper/Working_Folder/Data_Update.xlsx",
sheet = "UGA", col_types = c("date",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric"))
UGA <- UGA[order(UGA$DATE),]
#-----------------------Calculate Returns and Errors--------------#
UGA$per_asset_return <- log(UGA$Futures/lag(UGA$Futures))
UGA$per_ETF_return <- log(UGA$UGA_MID/lag(UGA$UGA_MID))
UGA$per_NAV_return <- log(UGA$UGA_NAV/lag(UGA$UGA_NAV))
UGA$etf_asset_error <- UGA$per_ETF_return - UGA$per_asset_return
UGA <- na.omit(UGA)
#----------------------Exploratory Plot--------------------------#
#------ETF, Asset Basket Error
qplot(UGA$DATE, (UGA$etf_asset_error * 100), geom = 'line') + theme_bw() +
ggtitle("Daily Return Error: UGA ETF - Asset Basket") + ylab("Error (%)") +
xlab("Date")
#-----ETF and Asset Basket
etfcolor <- "black"
assetcolor <- "darkgrey"
coeff <- UGA$Futures[1] / UGA$UGA_MID[1]
ggplot(data = UGA, aes(x = DATE)) +
geom_line(aes(y = UGA_MID), color = etfcolor) +
geom_line(aes(y = Futures / coeff), color = assetcolor) +
scale_y_continuous(
name = 'ETF Price ($)',
sec.axis = sec_axis(~.*coeff, name = "Asset Basket Price (Dollars per Gallon)")
) + theme_bw() + ggtitle("UGA ETF and Asset Basket Price") + xlab("Date")
#----Premium/Discount to NAV
qplot(UGA$DATE, ((UGA$UGA_MID - UGA$UGA_NAV)/UGA$UGA_NAV * 100), geom = 'line') +
theme_bw() + ylab("Premium/Discount (%)") + xlab("Date") + ggtitle("UGA Premium/Discount to NAV")
#-------------------OLS-----------------------------------------------#
#--------Simple
simple <- lm(per_asset_return ~ per_ETF_return, data = UGA)
summary(simple)
#--------Dummy
model <- lm(abs(UGA$etf_asset_error) ~ abs(UGA$per_ETF_return) + UGA$`RB Day Before Roll` + UGA$`RB Day After Roll` +
UGA$`RB Feb` + UGA$`RB Mar` + UGA$`RB April` + UGA$`RB May` + UGA$`RB June` + UGA$`RB July` +
UGA$`RB Aug` + UGA$`RB Sept` + UGA$`RB Oct` + UGA$`RB Nov` + UGA$`RB Dec` + UGA$`RB 2013` +
UGA$`RB 2014` + UGA$`RB 2015` + UGA$`RB 2016` + UGA$`RB 2017` + UGA$`RB 2018` + UGA$`RB 2019` +
UGA$`RB 2020` + UGA$`RB STEO` + UGA$`RB Drilling Prod` + UGA$`RB Petro Supply/Prod` + UGA$`RB Annual Energy Outlook`)
summary(model)
#---------------------GARCH----------------------------------------------#
err_garch = tseries::garch(x = UGA$etf_asset_error, order = c(1,1))
summary(err_garch)
#--GARCH Volatility Graph
# This graphs the Volatility from the GARCH model versus the market returns
vol = err_garch$fitted.values # assign the fitted values to a variable
vol = data.frame(vol) # convert to a dataframe
#--------Dummy
model <- lm(abs(UGA$etf_asset_error) ~ abs(UGA$per_ETF_return) + UGA$`RB Day Before Roll` + UGA$`RB Day After Roll` +
UGA$`RB Feb` + UGA$`RB Mar` + UGA$`RB April` + UGA$`RB May` + UGA$`RB June` + UGA$`RB July` +
UGA$`RB Aug` + UGA$`RB Sept` + UGA$`RB Oct` + UGA$`RB Nov` + UGA$`RB Dec` + UGA$`RB 2013` +
UGA$`RB 2014` + UGA$`RB 2015` + UGA$`RB 2016` + UGA$`RB 2017` + UGA$`RB 2018` + UGA$`RB 2019` +
UGA$`RB 2020` + UGA$`RB STEO` + UGA$`RB Drilling Prod` + UGA$`RB Petro Supply/Prod` + UGA$`RB Annual Energy Outlook`)
summary(model)
library(quantmod)
start_date <- "2012-01-01"
end_date <- '2020-02-10'
symbols <- c("CORN", 'SOYB', 'WEAT', 'UGA', 'USO')
#Pull Data from Yahoo Finance
quantmod::getSymbols(Symbols = symbols,
src = "yahoo",
index.class = "POSIXct",
from = start_date,
to = end_date,
adjust = FALSE)
rm(list = ls())
#Assign arguments
start_date <- "2012-01-01"
end_date <- '2020-02-10'
symbols <- c("CORN", 'SOYB', 'WEAT', 'UGA', 'USO')
#Pull Data from Yahoo Finance
quantmod::getSymbols(Symbols = symbols,
src = "yahoo",
index.class = "POSIXct",
from = start_date,
to = end_date,
adjust = FALSE)
library(xts)
volume = merge(CORN$CORN.Volume, SOYB$SOYB.Volume)
View(volume)
volume = merge(CORN$CORN.Volume, SOYB$SOYB.Volume, WEAT$WEAT.Volume, USO$USO.Volume, UGA$UGA.Volume)
View(volume)
volume_df = data.frame(DATE = as.Date(index(volume)), volume)
View(volume_df)
setwd("G:/My Drive/3_Massa Research/Neff Paper/Working_Folder")
write.csv(volume_df, "G:/My Drive/3_Massa Research/Neff Paper/Working_Folder")
write.csv(volume_df)
write.csv(volume_df, "G:/My Drive/3_Massa Research/Neff Paper/Working_Folder/Volume.csv")
volume <- read.csv("G:/My Drive/3_Massa Research/Neff Paper/Working_Folder/Volume.csv")
rm(list=ls())
library(readxl)
library(tidyverse)
library(ggthemes)
SOYB <- read_excel("G:/My Drive/3_Massa Research/Neff Paper/Working_Folder/Data_Update.xlsx",
sheet = "SOYB", col_types = c("numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric"))
SOYB$DATE <- as.Date(SOYB$DATE, origin = "1899-12-30")
SOYB <- SOYB[order(SOYB$DATE),]
SOYB$asset_basket <- (SOYB$`F1(.35)` * 0.35) + (SOYB$`F2(.3)` * 0.30) + (SOYB$`F3(.35)` * 0.35)
#-------------------------Calculate Returns and Errors------------------------------#
SOYB$per_asset_return <- log(SOYB$asset_basket / lag(SOYB$asset_basket))
SOYB$per_ETF_return <- log(SOYB$SOYB_MID / lag(SOYB$SOYB_MID))
SOYB$per_NAV_return <- log(SOYB$SOYB_NAV / lag(SOYB$SOYB_NAV))
SOYB$etf_asset_error <- SOYB$per_ETF_return - SOYB$per_asset_return
volume <- read.csv("G:/My Drive/3_Massa Research/Neff Paper/Working_Folder/Volume.csv")
SOYB_1 <- merge(SOYB, volume$SOYB.Volume, by = "DATE")
SOYB_1 <- merge(SOYB, volume$SOYB.Volume, by = "DATE")
volume <- read.csv("G:/My Drive/3_Massa Research/Neff Paper/Working_Folder/Volume.csv")
volume <- data.frame(volume$DATE, volume$SOYB.Volume)
SOYB_1 <- merge(SOYB, volume, by = "DATE")
View(SOYB)
View(volume)
View(volume)
View(volume)
volume <- read.csv("G:/My Drive/3_Massa Research/Neff Paper/Working_Folder/Volume.csv")
View(volume)
#-----------------------Add ETF Volume Data-----------------------#
# Import volume data from csv
volume <- read.csv("G:/My Drive/3_Massa Research/Neff Paper/Working_Folder/Volume.csv")
# subset the dataframe to only the relevant columes
volume <- data.frame(volume$DATE, volume$SOYB.Volume)
#rename the columns
colnames(volume) <- c("DATE", "Volume")
#Merge the Volume data with the other data
SOYB_1 <- merge(SOYB, volume$SOYB.Volume, by = "DATE")
#Merge the Volume data with the other data
SOYB_1 <- merge(SOYB, volume, by = "DATE")
View(SOYB)
SOYB$DATE
volume$DATE
#-----------------------Add ETF Volume Data-----------------------#
# Import volume data from csv
volume <- read.csv("G:/My Drive/3_Massa Research/Neff Paper/Working_Folder/Volume.csv")
# subset the dataframe to only the relevant columes
volume <- data.frame(as.Date(volume$DATE), volume$SOYB.Volume)
#rename the columns
colnames(volume) <- c("DATE", "Volume")
#Merge the Volume data with the other data
SOYB_1 <- merge(SOYB, volume, by = "DATE")
View(SOYB_1)
#Remove rows with NA
SOYB <- na.omit(SOYB)
rm(list = ls())
library(readxl)
library(tidyverse)
library(ggthemes)
library(xts)
#-----------------Import Data from Excel and order------------#
CORN <- read_excel("G:/My Drive/3_Massa Research/Neff Paper/Working_Folder/Data_Update.xlsx",
sheet = "CORN", col_types = c("numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric"))
CORN$DATE <- as.Date(CORN$DATE, origin = "1899-12-30")
# Note: If I import the Date column as a "Date" using readxl, it includes a timezone character
# which creates issue when I merge this df and the volume df. also need to store the data in
# excel as a
CORN <- CORN[order(CORN$DATE),] # order by date
CORN$asset_basket <- (CORN$`F1(.35)` * 0.35) + (CORN$`F2(.3)` * 0.3) + (CORN$`F3(.35)` * 0.35) #reconstruct asset basket
#-----------------------Calculate Returns and Errors--------------#
CORN$per_asset_return <- log(CORN$asset_basket/lag(CORN$asset_basket)) # calculate percent asset basket return
CORN$per_ETF_return <- log(CORN$CORN_MID/lag(CORN$CORN_MID)) #calculate percent ETF return
CORN$per_NAV_return <- log(CORN$CORN_NAV/lag(CORN$CORN_NAV)) #calculate percent NAV return
CORN$etf_asset_error <- CORN$per_ETF_return - CORN$per_asset_return #calculate error between ETF and Asset
#-----------------------Add ETF Volume Data-----------------------#
# Import volume data from csv
volume <- read.csv("G:/My Drive/3_Massa Research/Neff Paper/Working_Folder/Volume.csv")
# subset the dataframe to only the relevant columes
volume <- data.frame(as.Date(volume$DATE), volume$CORN.Volume)
#rename the columns
colnames(volume) <- c("DATE", "Volume")
#Merge the Volume data with the other data
CORN <- merge(CORN, volume, by = "DATE")
#Remove rows with NA
CORN <- na.omit(CORN) #Omit the rows with NAs, which are the final roll days
View(CORN)
volume <- lm(abs(CORN$etf_asset_error ~  abs(CORN$per_asset_return) + CORN$Volume))
summary(volume)
#Remove rows with NA
CORN <- na.omit(CORN) #Omit the rows with NAs, which are the final roll days
volume_mod <- lm(abs(CORN$etf_asset_error ~  abs(CORN$per_asset_return) + CORN$Volume))
is.numeric(CORN$Volume)
is.numeric(CORN$etf_asset_error)
is.numeric(CORN$per_asset_return)
volume_mod <- lm(abs(CORN$etf_asset_error) ~  abs(CORN$per_asset_return) + CORN$Volume)
summary(volume_mod)
