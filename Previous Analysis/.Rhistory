rm(list = ls())
library(readxl)
#library(tidyverse)
library(ggthemes)
library(xts)
#library(tidyr)
library(zoo)
library(rugarch)
#library(skedastic)
library(fpp2)
#-----------------Import Data from Excel and order------------#
CORN <- read_excel("G:/My Drive/3_Massa Research/Neff Paper/Working_Folder/Data_Update.xlsx",
sheet = "CORN", col_types = c("numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric"))
CORN$DATE <- as.Date(CORN$DATE, origin = "1899-12-30")  #set date
CORN <- CORN[order(CORN$DATE),] #order by date
CORN$asset_basket <- (CORN$`F1(.35)` * 0.35) + (CORN$`F2(.3)` * 0.3) + (CORN$`F3(.35)` * 0.35) #reconstruct asset basket
CORN$per_asset_return <- log(CORN$asset_basket/lag(CORN$asset_basket))* 100 # calculate percent asset basket return
CORN$per_ETF_return <- log(CORN$CORN_MID/lag(CORN$CORN_MID)) * 100#calculate percent ETF return
CORN$per_NAV_return <- log(CORN$CORN_NAV/lag(CORN$CORN_NAV)) * 100#calculate percent NAV return
CORN$etf_asset_error <- CORN$per_ETF_return - CORN$per_asset_return #calculate error between ETF and Asset
#-----------------------Add ETF Volume Data-----------------------#
# Import volume data from csv
volume <- read.csv("G:/My Drive/3_Massa Research/Neff Paper/Working_Folder/Volume.csv")
# subset the dataframe to only the relevant columes
volume <- data.frame(as.Date(volume$DATE), volume$CORN.Volume)
#rename the columns
colnames(volume) <- c("DATE", "Volume")
#Merge the Volume data with the other data
CORN <- merge(CORN, volume, by = "DATE")
# calculate percent change in volume
CORN$volume_return <-log(CORN$Volume/lag(CORN$Volume)) * 100
#Remove rows with NAsm which has the effect of deleting roll days
CORN <- na.omit(CORN)
# This creates rows of NA's for all the missing days, including weekends, holidays,
# and the roll days we just deleted. Not sure why I have to create another "Date"
# column but that is the only way I could get it to work
CORN <- CORN %>%
mutate(Date = as.Date(DATE)) %>%
complete(Date = seq.Date(min(DATE), max(DATE), by="day"))
# Now to forward fill the date
CORN <- na.locf(na.locf(CORN), fromLast = TRUE)
rm(list = ls())
library(readxl)
library(tidyverse)
library(ggthemes)
library(xts)
library(tidyr)
library(zoo)
library(rugarch)
#library(skedastic)
library(fpp2)
#-----------------Import Data from Excel and order------------#
CORN <- read_excel("G:/My Drive/3_Massa Research/Neff Paper/Working_Folder/Data_Update.xlsx",
sheet = "CORN", col_types = c("numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric"))
CORN$DATE <- as.Date(CORN$DATE, origin = "1899-12-30")  #set date
CORN <- CORN[order(CORN$DATE),] #order by date
CORN$asset_basket <- (CORN$`F1(.35)` * 0.35) + (CORN$`F2(.3)` * 0.3) + (CORN$`F3(.35)` * 0.35) #reconstruct asset basket
CORN$per_asset_return <- log(CORN$asset_basket/lag(CORN$asset_basket))* 100 # calculate percent asset basket return
CORN$per_ETF_return <- log(CORN$CORN_MID/lag(CORN$CORN_MID)) * 100#calculate percent ETF return
CORN$per_NAV_return <- log(CORN$CORN_NAV/lag(CORN$CORN_NAV)) * 100#calculate percent NAV return
CORN$etf_asset_error <- CORN$per_ETF_return - CORN$per_asset_return #calculate error between ETF and Asset
#-----------------------Add ETF Volume Data-----------------------#
# Import volume data from csv
volume <- read.csv("G:/My Drive/3_Massa Research/Neff Paper/Working_Folder/Volume.csv")
# subset the dataframe to only the relevant columes
volume <- data.frame(as.Date(volume$DATE), volume$CORN.Volume)
#rename the columns
colnames(volume) <- c("DATE", "Volume")
#Merge the Volume data with the other data
CORN <- merge(CORN, volume, by = "DATE")
# calculate percent change in volume
CORN$volume_return <-log(CORN$Volume/lag(CORN$Volume)) * 100
#Remove rows with NAsm which has the effect of deleting roll days
CORN <- na.omit(CORN)
# This creates rows of NA's for all the missing days, including weekends, holidays,
# and the roll days we just deleted. Not sure why I have to create another "Date"
# column but that is the only way I could get it to work
CORN <- CORN %>%
mutate(Date = as.Date(DATE)) %>%
complete(Date = seq.Date(min(DATE), max(DATE), by="day"))
# Now to forward fill the date
CORN <- na.locf(na.locf(CORN), fromLast = TRUE)
# Remove the additional date column
CORN <- subset(CORN, select = -DATE)
#CORN <- na.omit(CORN)
# Convert the object into a XTS object
CORN.xts <- xts(CORN[,-1], order.by = CORN$Date)
mean(CORN$etf_asset_error, na.rm = TRUE)
sd(CORN$etf_asset_error, na.rm = TRUE)
e1071::skewness(CORN$etf_asset_error, na.rm = TRUE)
e1071::kurtosis(CORN$etf_asset_error, na.rm = TRUE)
max(CORN$etf_asset_error, na.rm = TRUE)
min(CORN$etf_asset_error, na.rm = TRUE)
# Graphs
#-----ETF and Asset Basket Prices
etfcolor <- "black"
assetcolor <- "darkgrey"
coeff <- CORN$asset_basket[1] / CORN$CORN_MID[1]
ggplot(data = CORN, aes(x = Date)) +
geom_line(aes(y = CORN_MID), color = etfcolor) +
geom_line(aes(y = asset_basket / coeff), color = assetcolor) +
scale_y_continuous(
name = "ETF Price ($)",
sec.axis = sec_axis(~.*coeff, name = "Asset Basket Price (cents per bushel)")
) + theme_bw() + ggtitle("CORN ETF and Asset Basket Price") + xlab("Date")
#-----ETF Returns
qplot(CORN$Date, CORN$per_ETF_return, geom = 'line') + ggtitle("CORN: ETF % Return") +
ylab('Log Percent Return') + xlab('Date') + theme_bw()
#-----Asset Returns
qplot(CORN$Date, CORN$per_asset_return, geom = 'line') + ggtitle("CORN: Asset Basket % Return") +
ylab('Log Percent Return') + xlab('Date') + theme_bw()
# Plot the ETF_ASSET_ERRORS
qplot(CORN$Date, CORN$etf_asset_error, geom = 'line') + ggtitle("CORN: Tracking Error") +
ylab('Error') + xlab('Date') + theme_bw()
qplot(CORN$Date, CORN$etf_asset_error^2, geom = 'line') + ggtitle('CORN: Squared Tracking Error') +
ylab('Squared Error') + xlab('Date') + theme_bw()
#==========Box Jenkins Procedure===================#
#- Investigate Stationarity of Tracking Error
ggAcf(CORN$etf_asset_error, lag.max = 650)
ggPacf(CORN$etf_asset_error, lag.max = 650)
Box.test(CORN$etf_asset_error)
tseries::kpss.test(CORN$etf_asset_error)
tseries::adf.test(CORN$etf_asset_error)
# Fit ARIMA Models
arima100 <- arima(CORN$etf_asset_error, order = c(1,0,0))
summary(arima100)
checkresiduals(arima100)
Box.test(arima100$residuals^2, type = 'Ljung-Box')
arima200 <- arima(CORN$etf_asset_error, order = c(2,0,0))
summary(arima200)
checkresiduals(arima200)
Box.test(arima200$residuals^2, type = 'Ljung-Box')
arima300 <- arima(CORN$etf_asset_error, order = c(3,0,0))
summary(arima300)
checkresiduals(arima300)
Box.test(arima300$residuals^2, lag = 1, type = 'Ljung-Box')
# Base
base_model_spec <- ugarchspec(variance.model = list(garchOrder = c(1,1)),
mean.model = list(armaOrder = c(3,0)))
base_fit <- ugarchfit(data = CORN.xts$etf_asset_error, spec = base_model_spec)
base_ft
base_fit
# Full
ext_reg <- CORN.xts # creates a new xts object to hold external regressors
# The code below removes all the columns which are not external regressors.
# There must be a better way to do this
#ext_reg$Date <- NULL
ext_reg$CORN_MID <- NULL
ext_reg$`F1(.35)` <- NULL
ext_reg$`F2(.3)` <- NULL
ext_reg$`F3(.35)` <- NULL
ext_reg$CORN_NAV <- NULL
ext_reg$ROLL <- NULL
ext_reg$`C Jan` <- NULL
ext_reg$`C 2012` <- NULL
ext_reg$etf_asset_error<- NULL
ext_reg$per_NAV_return <- NULL
ext_reg$per_ETF_return <- NULL
ext_reg$asset_basket <- NULL
ext_reg$Volume <- NULL
# Define the model
full_model_spec <- ugarchspec(variance.model = list(garchOrder = c(1,1),
external.regressors = ext_reg),
mean.model = list(armaOrder = c(3,0)))
setbounds(full_model_spec) <- list(vxreg1 = c(-100,100), vxreg2 = c(-100,100), vxreg3 = c(-100,100), vxreg4 = c(-100,100),
vxreg5 = c(-100,100), vxreg6 = c(-100,100), vxreg7 = c(-100,100), vxreg8 = c(-100,100),
vxreg9 = c(-100,100), vxreg10 = c(-100,100), vxreg11 = c(-100,100), vxreg12 = c(-100,100),
vxreg13 = c(-100,100), vxreg14 = c(-100,100), vxreg15 = c(-100,100), vxreg16 = c(-100,100),
vxreg17 = c(-100,100), vxreg18 = c(-100,100), vxreg19 = c(-100,100), vxreg20 = c(-100,100),
vxreg21 = c(-100,100), vxreg22 = c(-100,100), vxreg23 = c(-100,100), vxreg24 = c(-100,100),
vxreg25 = c(-100,100), vxreg26 = c(-100,100), vxreg28 = c(-100,100), vxreg29 = c(-100,100),
vxreg30 = c(-100,100))
# Fit the model and display results
full_fit <- ugarchfit(data = CORN.xts$etf_asset_error, spec = full_model_spec)
full_fit
rm(list = ls())
library(readxl)
library(tidyverse)
library(ggthemes)
library(xts)
library(tidyr)
library(zoo)
library(rugarch)
library(fpp2)
SOYB <- read_excel("G:/My Drive/3_Massa Research/Neff Paper/Working_Folder/Data_Update.xlsx",
sheet = "SOYB", col_types = c("numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric"))
#-------------------Date Manipulation and Cleaning----------------------#
SOYB$DATE <- as.Date(SOYB$DATE, origin = "1899-12-30") # Set date
SOYB <- SOYB[order(SOYB$DATE),] #order by date
#-------------------------Calculate Returns and Errors------------------------------#
SOYB$asset_basket <- (SOYB$`F1(.35)` * 0.35) + (SOYB$`F2(.3)` * 0.30) + (SOYB$`F3(.35)` * 0.35)
SOYB$per_asset_return <- log(SOYB$asset_basket / lag(SOYB$asset_basket)) * 100
SOYB$per_ETF_return <- log(SOYB$SOYB_MID / lag(SOYB$SOYB_MID)) * 100
SOYB$per_NAV_return <- log(SOYB$SOYB_NAV / lag(SOYB$SOYB_NAV)) * 100
SOYB$etf_asset_error <- SOYB$per_ETF_return - SOYB$per_asset_return
#-----------------------Add ETF Volume Data-----------------------#
# Import volume data from csv
volume <- read.csv("G:/My Drive/3_Massa Research/Neff Paper/Working_Folder/Volume.csv")
# subset the dataframe to only the relevant columes
volume <- data.frame(as.Date(volume$DATE), volume$SOYB.Volume)
#rename the columns
colnames(volume) <- c("DATE", "Volume")
#Merge the Volume data with the other data
SOYB <- merge(SOYB, volume, by = "DATE")
# calculate percent change in volume
SOYB$volume_return <- log(SOYB$Volume)
#--------More data Manipulation
SOYB <- na.omit(SOYB)
SOYB %>%
mutate(Date = as.Date(DATE)) %>%
complete(Date = seq.Date(min(DATE), max(DATE), by = "day"))
SOYB <- na.locf(na.locf(SOYB), fromLast = TRUE) #forward fill the date
SOYB %>%
mutate(Date = as.Date(DATE)) %>%
complete(Date = seq.Date(min(DATE), max(DATE), by = "day"))
SOYB <- na.locf(na.locf(SOYB), fromLast = TRUE) #forward fill the date
SOYB <- subset(SOYB, select = -DATE) #remove redundant date column
SOYB.xts <- xts(SOYB[,-1], order.by = SOYB$Date) #create xts object
View(SOYB)
View(SOYB)
rm(list = ls())
library(readxl)
library(tidyverse)
library(ggthemes)
library(xts)
library(tidyr)
library(zoo)
library(rugarch)
library(fpp2)
SOYB <- read_excel("G:/My Drive/3_Massa Research/Neff Paper/Working_Folder/Data_Update.xlsx",
sheet = "SOYB", col_types = c("numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric"))
#-------------------Date Manipulation and Cleaning----------------------#
SOYB$DATE <- as.Date(SOYB$DATE, origin = "1899-12-30") # Set date
SOYB <- SOYB[order(SOYB$DATE),] #order by date
#-------------------------Calculate Returns and Errors------------------------------#
SOYB$asset_basket <- (SOYB$`F1(.35)` * 0.35) + (SOYB$`F2(.3)` * 0.30) + (SOYB$`F3(.35)` * 0.35)
SOYB$per_asset_return <- log(SOYB$asset_basket / lag(SOYB$asset_basket)) * 100
SOYB$per_ETF_return <- log(SOYB$SOYB_MID / lag(SOYB$SOYB_MID)) * 100
SOYB$per_NAV_return <- log(SOYB$SOYB_NAV / lag(SOYB$SOYB_NAV)) * 100
SOYB$etf_asset_error <- SOYB$per_ETF_return - SOYB$per_asset_return
#-----------------------Add ETF Volume Data-----------------------#
# Import volume data from csv
volume <- read.csv("G:/My Drive/3_Massa Research/Neff Paper/Working_Folder/Volume.csv")
# subset the dataframe to only the relevant columes
volume <- data.frame(as.Date(volume$DATE), volume$SOYB.Volume)
#rename the columns
colnames(volume) <- c("DATE", "Volume")
#Merge the Volume data with the other data
SOYB <- merge(SOYB, volume, by = "DATE")
# calculate percent change in volume
SOYB$volume_return <- log(SOYB$Volume)
View(SOYB)
#--------More data Manipulation
SOYB <- na.omit(SOYB)
SOYB %>%
mutate(Date = as.Date(DATE)) %>%
complete(Date = seq.Date(min(DATE), max(DATE), by = "day"))
SOYB <- na.locf(na.locf(SOYB), fromLast = TRUE) #forward fill the date
SOYB <- subset(SOYB, select = -DATE) #remove redundant date column
SOYB.xts <- xts(SOYB[,-1], order.by = SOYB$Date) #create xts object
rm(list = ls())
library(readxl)
library(tidyverse)
library(ggthemes)
library(xts)
library(tidyr)
library(zoo)
library(rugarch)
library(fpp2)
SOYB <- read_excel("G:/My Drive/3_Massa Research/Neff Paper/Working_Folder/Data_Update.xlsx",
sheet = "SOYB", col_types = c("numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric"))
#-------------------Date Manipulation and Cleaning----------------------#
SOYB$DATE <- as.Date(SOYB$DATE, origin = "1899-12-30") # Set date
SOYB <- SOYB[order(SOYB$DATE),] #order by date
#-------------------------Calculate Returns and Errors------------------------------#
SOYB$asset_basket <- (SOYB$`F1(.35)` * 0.35) + (SOYB$`F2(.3)` * 0.30) + (SOYB$`F3(.35)` * 0.35)
SOYB$per_asset_return <- log(SOYB$asset_basket / lag(SOYB$asset_basket)) * 100
SOYB$per_ETF_return <- log(SOYB$SOYB_MID / lag(SOYB$SOYB_MID)) * 100
SOYB$per_NAV_return <- log(SOYB$SOYB_NAV / lag(SOYB$SOYB_NAV)) * 100
SOYB$etf_asset_error <- SOYB$per_ETF_return - SOYB$per_asset_return
#-----------------------Add ETF Volume Data-----------------------#
# Import volume data from csv
volume <- read.csv("G:/My Drive/3_Massa Research/Neff Paper/Working_Folder/Volume.csv")
# subset the dataframe to only the relevant columes
volume <- data.frame(as.Date(volume$DATE), volume$SOYB.Volume)
#rename the columns
colnames(volume) <- c("DATE", "Volume")
#Merge the Volume data with the other data
SOYB <- merge(SOYB, volume, by = "DATE")
# calculate percent change in volume
SOYB$volume_return <- log(SOYB$Volume)
#--------More data Manipulation
SOYB <- na.omit(SOYB)
SOYB %>%
mutate(Date = as.Date(DATE)) %>%
complete(Date = seq.Date(min(DATE), max(DATE), by = "day"))
SOYB <- na.locf(na.locf(SOYB), fromLast = TRUE) #forward fill the date
SOYB
SOYB <-SOYB %>%
mutate(Date = as.Date(DATE)) %>%
complete(Date = seq.Date(min(DATE), max(DATE), by = "day"))
SOYB <- na.locf(na.locf(SOYB), fromLast = TRUE) #forward fill the date
SOYB
SOYB <- subset(SOYB, select = -DATE) #remove redundant date column
SOYB.xts <- xts(SOYB[,-1], order.by = SOYB$Date) #create xts object
mean(SOYB$etf_asset_error, na.rm = TRUE)
sd(SOYB$etf_asset_error, na.rm = TRUE)
e1071::skewness(SOYB$etf_asset_error, na.rm = TRUE)
e1071::kurtosis(SOYB$etf_asset_error, na.rm = TRUE)
max(SOYB$etf_asset_error, na.rm = TRUE)
min(SOYB$etf_asset_error, na.rm = TRUE)
#---------------------Exploratory Plots--------------------------------------#
#------ETF, Asset Basket Error
qplot(SOYB$DATE, (SOYB$etf_asset_error * 100), geom = 'line') + theme_bw() +
ggtitle("Daily Return Error: SOYB ETF - Asset Basket") + ylab("Error (%)") +
xlab("Date")
#---------------------Exploratory Plots--------------------------------------#
#------ETF, Asset Basket Error
qplot(SOYB$Date, (SOYB$etf_asset_error * 100), geom = 'line') + theme_bw() +
ggtitle("Daily Return Error: SOYB ETF - Asset Basket") + ylab("Error (%)") +
xlab("Date")
ggplot(data = SOYB, aes(x = date) +
coeff <- SOYB$asset_basket[1]/SOYB$SOYB_MID[1]
ggplot(data = SOYB, aes(x = Date) +
ggplot(data = SOYB, aes(x = Date)) +
geom_line(aes(y = SOYB_MID), color = etfcolor) +
geom_line(aes(y = asset_basket / coeff), color = assetcolor) +
scale_y_continuous(
name = 'ETF Price ($)',
sec.axis = sec_axis(~.*coeff, name = "Asset Basket Price (cents per bushel)")
) + theme_bw() + ggtitle("SOYB ETF and Asset Basket Price") + xlab("Date")
#-----ETF and Asset Basket
etfcolor <- "black"
assetcolor <- "darkgrey"
coeff <- SOYB$asset_basket[1]/SOYB$SOYB_MID[1]
ggplot(data = SOYB, aes(x = Date)) +
geom_line(aes(y = SOYB_MID), color = etfcolor) +
geom_line(aes(y = asset_basket / coeff), color = assetcolor) +
scale_y_continuous(
name = 'ETF Price ($)',
sec.axis = sec_axis(~.*coeff, name = "Asset Basket Price (cents per bushel)")
) + theme_bw() + ggtitle("SOYB ETF and Asset Basket Price") + xlab("Date")
#----Premium/Discount to NAV
qplot(SOYB$DATE, ((SOYB$SOYB_MID - SOYB$SOYB_NAV)/SOYB$SOYB_NAV * 100), geom = 'line') +
theme_bw() + ylab("Premium/Discount (%)") + xlab("Date") + ggtitle("SOYB Premium/Discount to NAV")
coeff <- SOYB$asset_basket[1]/SOYB$SOYB_MID[1]
ggplot(data = SOYB, aes(x = Date)) +
geom_line(aes(y = SOYB_MID), color = etfcolor) +
geom_line(aes(y = asset_basket / coeff), color = assetcolor) +
scale_y_continuous(
name = 'ETF Price ($)',
sec.axis = sec_axis(~.*coeff, name = "Asset Basket Price (cents per bushel)")
) + theme_bw() + ggtitle("SOYB ETF and Asset Basket Price") + xlab("Date")
#----Premium/Discount to NAV
qplot(SOYB$Date, ((SOYB$SOYB_MID - SOYB$SOYB_NAV)/SOYB$SOYB_NAV * 100), geom = 'line') +
theme_bw() + ylab("Premium/Discount (%)") + xlab("Date") + ggtitle("SOYB Premium/Discount to NAV")
#==========Box Jenkins Procedure===================#
#- Investigate Stationarity of Tracking Error
ggAcf(SOYB$etf_asset_error, lag.max = 650)
ggPacf(SOYB$etf_asset_error, lag.max = 650)
Box.test(SOYB$etf_asset_error)
tseries::kpss.test(SOYB$etf_asset_error)
tseries::adf.test(SOYB$etf_asset_error)
# Fit ARIMA Models
arima100 <- arima(SOYB$etf_asset_error, order = c(1,0,0))
summary(arima100)
checkresiduals(arima100)
Box.test(arima100$residuals^2, type = 'Ljung-Box')
arima200 <- arima(SOYB$etf_asset_error, order = c(2,0,0))
summary(arima200)
checkresiduals(arima200)
Box.test(arima200$residuals^2, type = 'Ljung-Box')
arima300 <- arima(SOYB$etf_asset_error, order = c(3,0,0))
summary(arima300)
checkresiduals(arima300)
Box.test(arima300$residuals^2, lag = 1, type = 'Ljung-Box')
arima101 <- arima(SOYB$etf_asset_error, order = c(1,0,1))
summary(arima101)
checkresiduals(arima101)
Box.test(arima101$residuals^2, lag = 1, type = 'Ljung-Box')
arima400 <- arima(SOYB$etf_asset_error, order = c(4,0,0))
summary(arima400)
checkresiduals(arima400)
Box.test(arima400$residuals^2, lag = 1, type = 'Ljung-Box')
arima101 <- arima(SOYB$etf_asset_error, order = c(2,0,1))
summary(arima101)
checkresiduals(arima101)
arima101 <- arima(SOYB$etf_asset_error, order = c(3,0,1))
summary(arima101)
checkresiduals(arima101)
Box.test(arima101$residuals^2, lag = 1, type = 'Ljung-Box')
arima101 <- arima(SOYB$etf_asset_error, order = c(4,0,1))
summary(arima101)
checkresiduals(arima101)
arima101 <- arima(SOYB$etf_asset_error, order = c(4,0,2))
summary(arima101)
checkresiduals(arima101)
auto.arima(SOYB$etf_asset_error)
# Fit ARIMA Models
arima100 <- arima(SOYB$etf_asset_error, order = c(1,1,0))
summary(arima100)
checkresiduals(arima100)
arima300 <- arima(SOYB$etf_asset_error, order = c(3,1,0))
summary(arima300)
checkresiduals(arima300)
arima101 <- arima(SOYB$etf_asset_error, order = c(4,1,2))
summary(arima101)
checkresiduals(arima101)
arima101 <- arima(SOYB$etf_asset_error, order = c(4,1,4))
summary(arima101)
checkresiduals(arima101)
arima101 <- arima(SOYB$etf_asset_error, order = c(5,1,5))
summary(arima101)
checkresiduals(arima101)
